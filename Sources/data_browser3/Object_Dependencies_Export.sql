/*
Copyright 2019 Dirk Strack, Strack Software Development

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

--- Available Object_Types for PARAM below in view APP_OBJECT_DEPENDENCIES_V ---
select LISTAGG(OBJECT_TYPE, ':') WITHIN GROUP (ORDER BY OBJECT_TYPE) Object_Types
from (
	select DISTINCT OBJECT_TYPE
	from SYS.ALL_OBJECTS
	where (OBJECT_TYPE not like 'JAVA%' 
	  and OBJECT_TYPE not like 'INDEX%'
	  and OBJECT_TYPE != 'SYNONYM'
	)
);

*/


CREATE OR REPLACE VIEW APP_OBJECT_DEPENDENCIES_V (
	NODE_NAME, OBJECT_TYPE, OBJECT_NAME, OBJECT_OWNER, STATUS, 
	TARGET_NODE_NAME, TARGET_OBJECT_TYPE, TARGET_OBJECT_NAME, TARGET_OBJECT_OWNER, TARGET_STATUS,
	LABEL, TABLE_NAME, TARGET_TABLE_NAME
)
AS
WITH PARAM AS ( 
    SELECT  COALESCE(V('P28_OBJECT_TYPES'), 
    			'KEY CONSTRAINT:CHECK CONSTRAINT:NOT NULL CONSTRAINT'
    			||':FUNCTION:INDEX:MATERIALIZED VIEW:PACKAGE:PACKAGE BODY:PROCEDURE'
    			||':SEQUENCE:SYNONYM:TABLE:TRIGGER:TYPE:TYPE BODY:VIEW'
    		) Object_Types,
        NVL(V('P28_EXCLUDE_PATTERN'), 'SYS_C%')   Exclude_Pattern, 
        NVL(V('P28_OBJECT_TYPES'), 'NO') Exclude_Singles, 	-- YES/NO
        NVL(V('P28_INCLUDE_SYS'), 'YES') Include_Sys,		-- YES/NO
        NVL(V('P28_INCLUDE_EXTERNAL'), 'NO') Include_External,	-- YES/NO
        NVL(V('P28_DIAGRAM_OWNER'), SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA')) Current_Schema
    FROM DUAL 
), Sys_Objects as (
    select OBJECT_ID, OBJECT_TYPE, OBJECT_NAME, OWNER, STATUS
    from SYS.ALL_OBJECTS
    where NOT(OWNER = 'SYS' AND OBJECT_NAME IN ('DBMS_STANDARD', 'STANDARD'))
	and NOT(OWNER = 'PUBLIC' AND OBJECT_NAME IN ('DUAL'))
) , OBJECT_DEPENDENCIES AS (
    SELECT TO_CHAR(SO.OBJECT_ID) NODE_NAME,
        SO.OBJECT_TYPE,
        SO.OBJECT_NAME,
        SO.OWNER OBJECT_OWNER,
        SO.STATUS,
        TO_CHAR(TA.OBJECT_ID) TARGET_NODE_NAME,
        TA.OBJECT_TYPE TARGET_OBJECT_TYPE,
        TA.OBJECT_NAME TARGET_OBJECT_NAME,
        TA.OWNER 	  TARGET_OBJECT_OWNER,
        TA.STATUS 	  TARGET_STATUS,
        INITCAP(TA.OBJECT_TYPE) LABEL,
        case when SO.OBJECT_TYPE = 'TABLE' then SO.OBJECT_NAME end TABLE_NAME,
        case when TA.OBJECT_TYPE = 'TABLE' then TA.OBJECT_NAME end TARGET_TABLE_NAME
	FROM Sys_Objects TA
	LEFT OUTER JOIN SYS.ALL_DEPENDENCIES D ON D.REFERENCED_OWNER = TA.OWNER
		AND D.REFERENCED_NAME = TA.OBJECT_NAME
		AND D.REFERENCED_TYPE = TA.OBJECT_TYPE
	LEFT OUTER JOIN Sys_Objects SO ON D.OWNER = SO.OWNER
		AND D.NAME = SO.OBJECT_NAME
		AND D.TYPE = SO.OBJECT_TYPE
	WHERE SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') IN (TA.OWNER, SO.OWNER) 
    UNION ALL -- All Indexes -- 
    SELECT TO_CHAR(SO.OBJECT_ID) NODE_NAME,
        SO.OBJECT_TYPE,
        SO.OBJECT_NAME,
        SO.OWNER OBJECT_OWNER,
        SO.STATUS,
        TO_CHAR(TA.OBJECT_ID) TARGET_NODE_NAME,
        TA.OBJECT_TYPE TARGET_OBJECT_TYPE,
        TA.OBJECT_NAME TARGET_OBJECT_NAME,
        TA.OWNER 	  TARGET_OBJECT_OWNER,
        TA.STATUS 	  TARGET_STATUS,
        INITCAP(TA.OBJECT_TYPE) LABEL,
        case when SO.OBJECT_TYPE = 'TABLE' then SO.OBJECT_NAME end TABLE_NAME,
        case when TA.OBJECT_TYPE = 'TABLE' then TA.OBJECT_NAME end TARGET_TABLE_NAME
	FROM Sys_Objects TA, SYS.ALL_INDEXES D, Sys_Objects SO
    WHERE D.TABLE_OWNER = TA.OWNER
    AND D.TABLE_NAME = TA.OBJECT_NAME
    AND D.TABLE_TYPE = TA.OBJECT_TYPE
    AND D.OWNER = SO.OWNER
    AND D.INDEX_NAME = SO.OBJECT_NAME
    AND SO.OBJECT_TYPE = 'INDEX'
    AND SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') IN (TA.OWNER, SO.OWNER) 
    UNION ALL -- All FK Constraints --
    SELECT SO.CONSTRAINT_NAME NODE_NAME,
    	'KEY CONSTRAINT' OBJECT_TYPE,
        SO.CONSTRAINT_NAME OBJECT_NAME,
        SO.OWNER OBJECT_OWNER,
        SO.STATUS,
        TA.CONSTRAINT_NAME TARGET_NODE_NAME,
        'KEY CONSTRAINT' TARGET_OBJECT_TYPE,
        TA.CONSTRAINT_NAME TARGET_OBJECT_NAME,
        TA.OWNER 	  TARGET_OBJECT_OWNER,
        TA.STATUS 	  TARGET_STATUS,
	case SO.CONSTRAINT_TYPE when 'C' then 'Check' when 'P' then 'Primary' when 'R' then 'Reference' when 'U' then 'Unique' else SO.CONSTRAINT_TYPE end LABEL,
	case when SO.VIEW_RELATED IS NULL then SO.TABLE_NAME end TABLE_NAME,
	case when TA.VIEW_RELATED IS NULL then TA.TABLE_NAME end TARGET_TABLE_NAME
    FROM SYS.ALL_CONSTRAINTS SO, SYS.ALL_CONSTRAINTS TA
    WHERE SO.R_OWNER = TA.OWNER
    AND SO.R_CONSTRAINT_NAME = TA.CONSTRAINT_NAME
    AND SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') IN (TA.OWNER, SO.OWNER) 
    UNION ALL -- All_Object Constrants --
    SELECT SO.CONSTRAINT_NAME NODE_NAME,
		case SO.CONSTRAINT_TYPE 
		when 'C' then 
			case when SO.SEARCH_CONDITION_VC LIKE DBMS_ASSERT.ENQUOTE_NAME('%') || ' IS NOT NULL' then 
				'NOT NULL CONSTRAINT' else 'CHECK CONSTRAINT' end
		when 'R' then 'REF CONSTRAINT'
		else 'KEY CONSTRAINT' 
		end OBJECT_TYPE,
        SO.CONSTRAINT_NAME OBJECT_NAME,
        SO.OWNER OBJECT_OWNER,
        SO.STATUS,
        TO_CHAR(TA.OBJECT_ID) TARGET_NODE_NAME,
        TA.OBJECT_TYPE TARGET_OBJECT_TYPE,
        TA.OBJECT_NAME TARGET_OBJECT_NAME,
        TA.OWNER 	  TARGET_OBJECT_OWNER,
        TA.STATUS 	  TARGET_STATUS,
	case SO.CONSTRAINT_TYPE when 'C' then 'Check' when 'P' then 'Primary' when 'R' then 'Reference' when 'U' then 'Unique' else SO.CONSTRAINT_TYPE end LABEL,
	case when SO.VIEW_RELATED IS NULL then SO.TABLE_NAME end TABLE_NAME,
        case when TA.OBJECT_TYPE = 'TABLE' then TA.OBJECT_NAME end TARGET_TABLE_NAME
	FROM SYS.ALL_CONSTRAINTS SO, Sys_Objects TA
    WHERE SO.OWNER = TA.OWNER
    AND SO.TABLE_NAME = TA.OBJECT_NAME
    AND TA.OBJECT_TYPE = case when SO.VIEW_RELATED = 'DEPEND ON VIEW' then 'VIEW' else 'TABLE' end
    AND SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') IN (TA.OWNER, SO.OWNER) 
	AND SO.CONSTRAINT_TYPE != 'R'
	UNION ALL -- All_Object Constrants --
	SELECT 
		TO_CHAR(SO.OBJECT_ID) NODE_NAME,
		SO.OBJECT_TYPE OBJECT_TYPE,
		SO.OBJECT_NAME OBJECT_NAME,
		SO.OWNER OBJECT_OWNER,
		SO.STATUS,
		TA.CONSTRAINT_NAME TARGET_NODE_NAME,
		'KEY CONSTRAINT' TARGET_OBJECT_TYPE,
		TA.CONSTRAINT_NAME TARGET_OBJECT_NAME,
		TA.OWNER 	  	TARGET_OBJECT_OWNER,
		TA.STATUS 		TARGET_STATUS,
		'Reference'  	LABEL,
		case when TA.VIEW_RELATED IS NULL then TA.TABLE_NAME end TABLE_NAME,
		case when SO.OBJECT_TYPE = 'TABLE' then SO.OBJECT_NAME end TARGET_TABLE_NAME
	FROM SYS.ALL_CONSTRAINTS TA, Sys_Objects SO
	WHERE SO.OWNER = TA.OWNER
	AND TA.TABLE_NAME = SO.OBJECT_NAME
	AND SO.OBJECT_TYPE = case when TA.VIEW_RELATED = 'DEPEND ON VIEW' then 'VIEW' else 'TABLE' end
	AND SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') IN (TA.OWNER, SO.OWNER) 
	AND TA.CONSTRAINT_TYPE = 'R'
)
SELECT A.*
FROM OBJECT_DEPENDENCIES A, PARAM P 
WHERE ((TARGET_OBJECT_OWNER NOT IN ('PUBLIC', 'SYS') and TARGET_OBJECT_OWNER NOT LIKE 'APEX%') or Include_Sys = 'YES')
AND (OBJECT_OWNER IS NULL or (OBJECT_OWNER NOT IN ('PUBLIC', 'SYS') and OBJECT_OWNER NOT LIKE 'APEX%') or Include_Sys = 'YES')
AND (TARGET_OBJECT_OWNER = Current_Schema or Include_External = 'YES')
AND (OBJECT_OWNER IS NULL or OBJECT_OWNER = Current_Schema or Include_External = 'YES')
AND (OBJECT_OWNER IS NOT NULL or Exclude_Singles = 'NO')
AND (OBJECT_TYPE IS NULL or OBJECT_TYPE IN (SELECT COLUMN_VALUE FROM table(apex_string.split(Object_Types,':'))))
AND TARGET_OBJECT_TYPE IN (SELECT COLUMN_VALUE FROM table(apex_string.split(Object_Types,':')))
AND (case when TABLE_NAME IS NULL then 'VIEW' else 'TABLE' end IN (SELECT COLUMN_VALUE FROM table(apex_string.split(Object_Types,':'))) 
  or OBJECT_TYPE IS NULL or OBJECT_TYPE NOT IN ('KEY CONSTRAINT', 'CHECK CONSTRAINT', 'NOT NULL CONSTRAINT', 'REF CONSTRAINT'))
AND (case when TARGET_TABLE_NAME IS NULL then 'VIEW' else 'TABLE' end IN (SELECT COLUMN_VALUE FROM table(apex_string.split(Object_Types,':')))
  or TARGET_OBJECT_TYPE IS NULL or TARGET_OBJECT_TYPE NOT IN ('KEY CONSTRAINT', 'CHECK CONSTRAINT', 'NOT NULL CONSTRAINT', 'REF CONSTRAINT'))
AND NOT EXISTS (SELECT --+ NO_UNNEST
    1 FROM table(apex_string.split(Exclude_Pattern,','))
    WHERE (OBJECT_NAME LIKE COLUMN_VALUE ESCAPE '\'
    OR TABLE_NAME LIKE COLUMN_VALUE ESCAPE '\'
	OR TARGET_OBJECT_NAME LIKE COLUMN_VALUE ESCAPE '\'
    OR TARGET_TABLE_NAME LIKE COLUMN_VALUE ESCAPE '\')
);


-----------------------------------------------
-- Diagram Nodes -- 
CREATE OR REPLACE VIEW APP_OBJECT_DIAGRAM_NODES_V (DIAGRAM, OBJECT_NAME, SHAPE, COLOR)
AS
WITH PARAM AS ( 
	SELECT  SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') CURRENT_SCHEMA
	FROM DUAL 
), DIAGRAM_EDGES AS (
    SELECT * FROM APP_OBJECT_DEPENDENCIES_V
), NODES AS (
	SELECT 
		NODE_NAME, OBJECT_OWNER,
		case when OBJECT_OWNER != CURRENT_SCHEMA then 
			INITCAP(OBJECT_OWNER) || '.' 
		end || INITCAP(OBJECT_NAME)
		AS OBJECT_NAME,
		case OBJECT_TYPE 
			when 'FUNCTION' 			then 'ellipse'
			when 'TYPE' 				then 'house'
			when 'TYPE BODY' 			then 'invhouse'
			when 'PACKAGE' 				then 'house'
			when 'PACKAGE BODY' 		then 'invhouse'
			when 'PROCEDURE' 			then 'trapezium'
			when 'TABLE' 				then 'doubleoctagon'
			when 'VIEW' 				then 'octagon'
			when 'TRIGGER' 				then 'box'
			when 'MATERIALIZED VIEW' 	then 'octagon'
			else 'box'  
		end SHAPE,
		case when OBJECT_OWNER != CURRENT_SCHEMA then 'Orchid'
			when STATUS = 'INVALID' then 'Red' 
		else  case OBJECT_TYPE 
				when 'FUNCTION' 			then 'Aqua'
				when 'TYPE' 				then 'LightSkyBlue'
				when 'TYPE BODY' 			then 'LightSkyBlue'
				when 'PACKAGE' 				then 'LightSeaGreen'
				when 'PACKAGE BODY' 		then 'LightSeaGreen'
				when 'PROCEDURE' 			then 'DarkTurquoise'
				when 'TABLE' 				then 'Khaki'
				when 'VIEW' 				then 'PowderBlue'
				when 'TRIGGER' 				then 'LightSalmon'
				when 'MATERIALIZED VIEW' 	then 'Goldenrod'
				else 'YellowGreen'
			end
		end COLOR
	FROM (
		SELECT  NODE_NAME, OBJECT_TYPE, OBJECT_NAME, OBJECT_OWNER, STATUS, TABLE_NAME
		FROM DIAGRAM_EDGES
		WHERE OBJECT_OWNER IS NOT NULL
		UNION
		SELECT  TARGET_NODE_NAME, TARGET_OBJECT_TYPE, TARGET_OBJECT_NAME, TARGET_OBJECT_OWNER, TARGET_STATUS, TARGET_TABLE_NAME
		FROM DIAGRAM_EDGES
	), PARAM 
)
SELECT DISTINCT 
	INITCAP(CURRENT_SCHEMA) DIAGRAM,
	OBJECT_NAME
	|| case when COUNT(*) OVER (PARTITION BY OBJECT_NAME) > 1
		then ' #'||DENSE_RANK() OVER (PARTITION BY OBJECT_NAME ORDER BY NODE_NAME, OBJECT_OWNER)
	end
	AS OBJECT_NAME, 
	SHAPE, COLOR
FROM NODES, PARAM 
;

-- Diagram Edges --
CREATE OR REPLACE VIEW APP_OBJECT_DIAGRAM_EDGES_V (DIAGRAM, 
	SOURCE_NAME, TARGET_NAME, DESCRIPTION, COLOR)
AS
WITH PARAM AS ( 
	SELECT  SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA') CURRENT_SCHEMA
	FROM DUAL 
), DIAGRAM_EDGES AS (
    SELECT * FROM APP_OBJECT_DEPENDENCIES_V
), NODES AS (
	SELECT 
		NODE_NAME,
		OBJECT_NAME
		|| case when COUNT(*) OVER (PARTITION BY OBJECT_NAME) > 1 then 
			' #'||DENSE_RANK() OVER (PARTITION BY OBJECT_NAME ORDER BY NODE_NAME, OBJECT_OWNER)
		end
		AS OBJECT_NAME
	FROM (
		SELECT 
			NODE_NAME, OBJECT_OWNER,
			case when OBJECT_OWNER != CURRENT_SCHEMA then 
				INITCAP(OBJECT_OWNER) || '.' 
			end || INITCAP(OBJECT_NAME)
			AS OBJECT_NAME
		FROM (
			SELECT  NODE_NAME, OBJECT_TYPE, OBJECT_NAME, OBJECT_OWNER, STATUS, TABLE_NAME
			FROM DIAGRAM_EDGES
			WHERE OBJECT_OWNER IS NOT NULL
			UNION
			SELECT  TARGET_NODE_NAME, TARGET_OBJECT_TYPE, TARGET_OBJECT_NAME, TARGET_OBJECT_OWNER, TARGET_STATUS, TARGET_TABLE_NAME
			FROM DIAGRAM_EDGES
		), PARAM 
	)
) SELECT  DISTINCT 
    INITCAP(CURRENT_SCHEMA) DIAGRAM,
    S.OBJECT_NAME 			SOURCE_NAME,
    T.OBJECT_NAME 			TARGET_NAME,
    E.LABEL 				DESCRIPTION, 
    'DarkGrey' 				COLOR
FROM PARAM
CROSS JOIN DIAGRAM_EDGES E
JOIN NODES S ON S.NODE_NAME = E.NODE_NAME 
JOIN NODES T ON T.NODE_NAME = E.TARGET_NODE_NAME 
WHERE E.OBJECT_NAME IS NOT NULL;

/*
select * from APP_OBJECT_DIAGRAM_EDGES_V;
select * from APP_OBJECT_DIAGRAM_NODES_V;
*/