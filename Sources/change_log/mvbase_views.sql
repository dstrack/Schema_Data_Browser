/*
Copyright 2020 Dirk Strack, Strack Software Development

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
DROP MATERIALIZED VIEW MVBASE_UNIQUE_KEYS;
DROP MATERIALIZED VIEW MVBASE_ALTER_UNIQUEKEYS;
DROP MATERIALIZED VIEW MVBASE_FOREIGNKEYS;
DROP MATERIALIZED VIEW MVBASE_VIEW_FOREIGN_KEYS;
DROP MATERIALIZED VIEW MVBASE_VIEWS;
DROP MATERIALIZED VIEW MVBASE_REFERENCES;

DROP VIEW VBASE_VIEWS0;
*/

DECLARE
	PROCEDURE DROP_MVIEW( p_MView_Name VARCHAR2) IS
	BEGIN
        BEGIN
            EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW ' || p_MView_Name;
            -- DBMS_OUTPUT.PUT_LINE('DROP MATERIALIZED VIEW ' || p_MView_Name || ';');
        EXCEPTION
          WHEN OTHERS THEN
            IF SQLCODE != -12003 THEN
                RAISE;
            END IF;
        END;
        BEGIN
            EXECUTE IMMEDIATE 'DROP TABLE ' || p_MView_Name;
            DBMS_OUTPUT.PUT_LINE('DROP TABLE ' || p_MView_Name || ';');
        EXCEPTION
          WHEN OTHERS THEN
            IF SQLCODE != -942 THEN
                RAISE;
            END IF;
        END;
    END;
BEGIN
	DROP_MVIEW('MVBASE_FOREIGNKEYS');
	DROP_MVIEW('MVBASE_VIEW_FOREIGN_KEYS');
	DROP_MVIEW('MVBASE_VIEWS');
	DROP_MVIEW('MVBASE_REFERENCES');
END;
/

CREATE MATERIALIZED VIEW MVBASE_VIEWS
    BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
WITH SCALAR_KEYS AS (
	select TABLE_NAME, TABLE_OWNER,
		UNIQUE_KEY_COLS SCALAR_KEY_COLUMN, HAS_SCALAR_KEY,
		SEQUENCE_OWNER, SEQUENCE_NAME,
		DENSE_RANK() OVER (PARTITION BY TABLE_NAME, TABLE_OWNER
			ORDER BY 
				CONSTRAINT_TYPE DESC, -- prefer UNIQUE keys 
				KEY_HAS_NEXTVAL DESC, 
				KEY_HAS_SYS_GUID DESC,
				HAS_NULLABLE ASC,
				CONSTRAINT_NAME ASC) POSITION
	FROM MVBASE_UNIQUE_KEYS SK
	WHERE SK.HAS_SCALAR_KEY = 'YES'
	AND TABLE_OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')
), BASE_VIEWS AS (
    SELECT VIEW_NAME, TABLE_NAME, RUN_NO, SHORT_NAME
    FROM  table (changelog_conf.FN_Pipe_Base_Views)
), CHANGE_LOG AS (
	SELECT TABLE_NAME, FOREIGN_KEY_COL
	FROM TABLE (changelog_conf.FN_Pipe_Changelog_fkeys)
), TABLE_STATUS AS (
    SELECT DISTINCT TABLE_NAME,
        MAX(CASE WHEN COLUMN_NAME = CREATE_TIMESTAMP_COLUMN_NAME THEN
                CASE WHEN NULLABLE = 'N' -- AND DEFAULT_LENGTH > 0
                AND DEFAULT_TEXT = changelog_conf.Get_FunctionModifyDate
                THEN 'READY' ELSE 'YES' END
        END) HAS_CREATE_TIMESTAMP,
        MAX(CASE WHEN COLUMN_NAME = CREATE_USER_COLUMN_NAME THEN
                CASE WHEN NULLABLE = 'N' 
                AND DEFAULT_TEXT = changelog_conf.Get_DefaultModifyUser
                THEN 'READY' ELSE 'YES' END
        END) HAS_CREATE_USER,
        MAX(CASE WHEN COLUMN_NAME = MODFIY_TIMESTAMP_COLUMN_NAME THEN
                CASE WHEN NULLABLE = 'N' 
                AND DEFAULT_TEXT = changelog_conf.Get_FunctionModifyDate
                THEN 'READY' ELSE 'YES' END
        END) HAS_MODFIY_TIMESTAMP,
        MAX(CASE WHEN COLUMN_NAME = MODFIY_USER_COLUMN_NAME THEN
                CASE WHEN NULLABLE = 'N' 
                AND DEFAULT_TEXT = changelog_conf.Get_DefaultModifyUser
                THEN 'READY' ELSE 'YES' END
        END) HAS_MODFIY_USER,
        MAX(CASE WHEN DATA_TYPE IN ('BLOB', 'CLOB', 'NCLOB', 'LONG', 'ORDIMAGE') THEN 'YES'
        END) HAS_BLOB_COLUMNS,
        MAX(CASE WHEN COLUMN_NAME = INDEX_FORMAT_COLUMN_NAME THEN 'YES'
        END) HAS_INDEX_FORMAT,
		MAX(CREATE_TIMESTAMP_COLUMN_NAME) CREATE_TIMESTAMP_COLUMN_NAME, 
		MAX(CREATE_USER_COLUMN_NAME) CREATE_USER_COLUMN_NAME, 
		MAX(MODFIY_TIMESTAMP_COLUMN_NAME) MODFIY_TIMESTAMP_COLUMN_NAME, 
		MAX(MODFIY_USER_COLUMN_NAME) MODFIY_USER_COLUMN_NAME, 
		MAX(INDEX_FORMAT_COLUMN_NAME) INDEX_FORMAT_COLUMN_NAME,
		MAX(INCLUDE_DATA_COLUMNS) INCLUDE_DATA_COLUMNS
    FROM (
		SELECT DISTINCT TABLE_NAME,  COLUMN_ID,  COLUMN_NAME, DATA_TYPE, NULLABLE, DEFAULT_LENGTH, DEFAULT_TEXT, INCLUDE_DATA_COLUMNS,
			FIRST_VALUE(CREATE_TIMESTAMP_COLUMN_NAME IGNORE NULLS) OVER (PARTITION BY TABLE_NAME ORDER BY COLUMN_ID) CREATE_TIMESTAMP_COLUMN_NAME,
			FIRST_VALUE(CREATE_USER_COLUMN_NAME IGNORE NULLS) OVER (PARTITION BY TABLE_NAME ORDER BY COLUMN_ID) CREATE_USER_COLUMN_NAME,
			FIRST_VALUE(MODFIY_TIMESTAMP_COLUMN_NAME IGNORE NULLS) OVER (PARTITION BY TABLE_NAME ORDER BY COLUMN_ID) MODFIY_TIMESTAMP_COLUMN_NAME,
			FIRST_VALUE(MODFIY_USER_COLUMN_NAME IGNORE NULLS) OVER (PARTITION BY TABLE_NAME ORDER BY COLUMN_ID) MODFIY_USER_COLUMN_NAME,
			FIRST_VALUE(INDEX_FORMAT_COLUMN_NAME IGNORE NULLS) OVER (PARTITION BY TABLE_NAME ORDER BY COLUMN_ID) INDEX_FORMAT_COLUMN_NAME
		FROM (
			SELECT C.TABLE_NAME, C.COLUMN_ID, C.COLUMN_NAME, DATA_TYPE, NULLABLE, DEFAULT_LENGTH, DEFAULT_TEXT,
				case when DATA_TYPE IN ( changelog_conf.Get_DatatypeModifyDate, changelog_conf.Get_AltDatatypeModifyDate) 
						and changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnCreateDate_List) = 'YES'
					then COLUMN_NAME
				end CREATE_TIMESTAMP_COLUMN_NAME,
				case when DATA_TYPE = changelog_conf.Get_DatatypeModifyUser 
						and changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnCreateUser_List) = 'YES'
					then COLUMN_NAME
				end CREATE_USER_COLUMN_NAME,
				case when DATA_TYPE IN ( changelog_conf.Get_DatatypeModifyDate, changelog_conf.Get_AltDatatypeModifyDate) 
						and changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnModifyDate_List) = 'YES'
					then COLUMN_NAME
				end MODFIY_TIMESTAMP_COLUMN_NAME,
				case when DATA_TYPE = changelog_conf.Get_DatatypeModifyUser 
						and changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnModifyUser_List) = 'YES'
					then COLUMN_NAME
				end MODFIY_USER_COLUMN_NAME,
				case when DATA_TYPE IN ('CHAR', 'VARCHAR2') 
						and changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnIndexFormat) = 'YES'
					then COLUMN_NAME
				end INDEX_FORMAT_COLUMN_NAME,
				case when changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnWorkspace_List) = 'NO'
				AND changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnDeletedMark_List) = 'NO'
				AND changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnCreateUser_List) = 'NO'
				AND changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnCreateDate_List) = 'NO'
				AND changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnModifyUser_List) = 'NO'
				AND changelog_conf.Match_Column_Pattern(COLUMN_NAME, changelog_conf.Get_ColumnModifyDate_List) = 'NO'
				AND changelog_conf.Match_Column_Pattern(COLUMN_NAME, REPLACE(PK.VIEW_KEY_COLS, ' ')) = 'NO'
					then 'YES' else 'NO' 
				end INCLUDE_DATA_COLUMNS
			FROM MVBASE_ALTER_UNIQUEKEYS PK, table (changelog_conf.FN_Pipe_Table_Columns) C
			WHERE C.TABLE_NAME = PK.TABLE_NAME
			AND PK.POSITION = 1
		)
	) C
	GROUP BY TABLE_NAME
)
SELECT T.*,
	CASE WHEN EXISTS (SELECT 1
		FROM (SELECT N.COLUMN_VALUE PATTERN FROM TABLE( changelog_conf.in_list(changelog_conf.Get_ExcludeTablesPattern, ',') ) N) P
		WHERE NVL(T.VIEW_NAME, T.TABLE_NAME) LIKE P.PATTERN ESCAPE '\'
	) THEN 'YES' ELSE 'NO' END EXCLUDED_TABLE,
	CASE WHEN changelog_conf.Match_Column_Pattern(T.VIEW_NAME, changelog_conf.Get_IncludeChangeLogPattern) = 'YES'
		AND changelog_conf.Match_Column_Pattern(T.VIEW_NAME, changelog_conf.Get_ExcludeChangeLogPattern) = 'NO'
		AND T.TABLE_NAME != changelog_conf.Get_ChangeLogTable
	THEN 'YES' ELSE 'NO' END INCLUDE_CHANGELOG,
	CASE WHEN EXISTS (
		SELECT 1 
		FROM SYS.USER_EXTERNAL_TABLES S
		WHERE S.TABLE_NAME = T.TABLE_NAME
	) THEN 'YES' ELSE 'NO' END IS_EXTERNAL_TABLE,
	NVL(C.HAS_CREATE_TIMESTAMP, 'NO') HAS_CREATE_TIMESTAMP,
	NVL(C.HAS_CREATE_USER, 'NO') HAS_CREATE_USER,
	NVL(C.HAS_MODFIY_TIMESTAMP, 'NO') HAS_MODFIY_TIMESTAMP,
	NVL(C.HAS_MODFIY_USER, 'NO') HAS_MODFIY_USER,
	NVL(C.HAS_BLOB_COLUMNS, 'NO') HAS_BLOB_COLUMNS,
	NVL(C.HAS_INDEX_FORMAT, 'NO') HAS_INDEX_FORMAT,
    C.CREATE_TIMESTAMP_COLUMN_NAME, 
    C.CREATE_USER_COLUMN_NAME, 
    C.MODFIY_TIMESTAMP_COLUMN_NAME, 
    C.MODFIY_USER_COLUMN_NAME, 
    C.INDEX_FORMAT_COLUMN_NAME, 
    C.INCLUDE_DATA_COLUMNS
FROM (
	SELECT  
		NVL(BV.VIEW_NAME, PK.TABLE_NAME) VIEW_NAME, 
		PK.TABLE_NAME, 
		SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') OWNER,
		PK.TABLESPACE_NAME,
		PK.VIEW_KEY_COLS PRIMARY_KEY_COLS,
		BV.RUN_NO,
		NVL(BV.SHORT_NAME, PK.SHORT_NAME) SHORT_NAME,
		CAST( changelog_conf.Get_Base_Table_Name(SHORT_NAME2) AS VARCHAR2(128)) SHORT_NAME2,
		PK.CONSTRAINT_NAME, PK.CONSTRAINT_TYPE, PK.HAS_WORKSPACE_ID, PK.HAS_DELETE_MARK, PK.IS_CANDIDATE_KEY, 
		PK.KEY_HAS_NEXTVAL, PK.KEY_HAS_SYS_GUID, 
		SK.SCALAR_KEY_COLUMN, SK.HAS_SCALAR_KEY,
		SK.SEQUENCE_OWNER, SK.SEQUENCE_NAME,
		PK.KEY_IS_ALTERED, PK.VIEW_IS_CREATED, PK.INCLUDE_TIMESTAMP, PK.INCLUDE_DELETE_MARK, PK.INCUDE_WORKSPACE_ID,
		PK.HAS_SCALAR_VIEW_KEY HAS_SCALAR_PRIMARY_KEY,
		PK.HAS_SERIAL_VIEW_KEY HAS_SERIAL_PRIMARY_KEY,
		C.FOREIGN_KEY_COL CHANGELOG_KEY_COL
	FROM MVBASE_ALTER_UNIQUEKEYS PK, BASE_VIEWS BV, CHANGE_LOG C, SCALAR_KEYS SK
	WHERE PK.TABLE_NAME = BV.TABLE_NAME (+)
	AND PK.TABLE_NAME = C.TABLE_NAME (+)
	AND PK.TABLE_NAME = SK.TABLE_NAME (+) AND SK.POSITION (+) = 1
	AND PK.POSITION = 1
) T, TABLE_STATUS  C
WHERE T.TABLE_NAME = C.TABLE_NAME (+)
;
ALTER  TABLE MVBASE_VIEWS ADD
 CONSTRAINT MVBASE_VIEWS_PK PRIMARY KEY (TABLE_NAME) USING INDEX;

CREATE INDEX MVBASE_VIEWS_IND ON MVBASE_VIEWS (VIEW_NAME, TABLE_NAME) COMPRESS 2;


/* Definition of Foreign Keys for all normal tables  */
CREATE MATERIALIZED VIEW MVBASE_FOREIGNKEYS
(CONSTRAINT_NAME, TABLE_NAME, FOREIGN_KEY_COLS, R_TABLE_NAME, R_SHORT_NAME, R_CONSTRAINT_TYPE, PRIMARY_KEY_COLS,
DELETE_RULE, DELETE_RULE_CLAUSE, CONSTRAINT_EXT, DEFERRABLE, CREATE_STAT, CREATE_STAT2, TRIGGER_STAT,
DELETE_SET_NULL_STAT, DELETE_SET_NULL_ORDER)
    BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
SELECT CONSTRAINT_NAME, TABLE_NAME, FOREIGN_KEY_COLS, R_TABLE_NAME, R_SHORT_NAME, R_CONSTRAINT_TYPE, PRIMARY_KEY_COLS,
    DELETE_RULE, DELETE_RULE_CLAUSE, CONSTRAINT_EXT, DEFERRABLE, CREATE_STAT, CREATE_STAT2,
    case when DELETE_RULE = 'SET NULL' then
        'CREATE OR REPLACE TRIGGER ' || CONSTRAINT_NAME || ' BEFORE DELETE ON ' || R_SHORT_NAME
        || chr(10) || 'BEGIN -- surogate for ON DELETE SET NULL, inserted by weco_vpd schema riser '
        || chr(10) || ' NULL;'
        || chr(10) || 'END;'
    end TRIGGER_STAT,
    DELETE_SET_NULL_STAT, DELETE_SET_NULL_ORDER
FROM (
    SELECT CONSTRAINT_NAME, TABLE_NAME, FOREIGN_KEY_COLS, R_TABLE_NAME, R_SHORT_NAME, R_CONSTRAINT_TYPE,
    UNIQUE_KEY_COLS PRIMARY_KEY_COLS,
    DELETE_RULE, DELETE_RULE_CLAUSE, CONSTRAINT_EXT, DEFERRABLE,
        CAST ('ALTER TABLE ' || BASE_TABLE_NAME || ' ADD ('
        || ' CONSTRAINT ' || CONSTRAINT_NAME || ' FOREIGN KEY (' || changelog_conf.Concat_List(KEY_PREFIX, FOREIGN_KEY_COLS2) || ')'
        || ' REFERENCES ' || R_SHORT_NAME || '(' || changelog_conf.Concat_List(KEY_PREFIX, VIEW_KEY_COLS) || ') '
        || DELETE_RULE_CLAUSE || ' '
        || 'DEFERRABLE INITIALLY ' || DEFERRED -- Constraint has to be DEFERRABLE to enable data import and cloning
        || ' ' || STATUS || ' ' || VALIDATED
        || ')' AS VARCHAR2(1024))
        CREATE_STAT, -- Next state
        'ALTER TABLE ' || TABLE_NAME || ' ADD ('
        || ' CONSTRAINT ' || CONSTRAINT_NAME || ' FOREIGN KEY (' || FOREIGN_KEY_COLS || ')'
        || ' REFERENCES ' || R_TABLE_NAME || '(' || UNIQUE_KEY_COLS || ') '
        || DELETE_RULE_CLAUSE || ' '
        || 'DEFERRABLE INITIALLY ' || DEFERRED -- Constraint has to be DEFERRABLE to enable data import and cloning
        || ' ' || STATUS || ' ' || VALIDATED
        || ')'
        CREATE_STAT2, -- current state for rollback
        CAST(case when DELETE_RULE = 'SET NULL' then
            '    UPDATE ' || changelog_conf.Get_Table_Schema || R_VIEW_NAME
            || ' SET ' || FK.FOREIGN_KEY_COLS2 || ' = NULL '
            || ' WHERE ' || FK.FOREIGN_KEY_COLS2 || ' = :OLD.' || FK.VIEW_KEY_COLS
        when DELETE_RULE = 'CASCADE' then
            '    DELETE FROM ' || changelog_conf.Get_Table_Schema || R_VIEW_NAME
            || ' WHERE ' || FK.FOREIGN_KEY_COLS2 || ' = :OLD.' || FK.VIEW_KEY_COLS
        when DELETE_RULE = 'NO ACTION' then
            '    SELECT 1 INTO v_SerialID FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM '
            || changelog_conf.Get_Table_Schema || R_VIEW_NAME
            || ' WHERE ' || FK.FOREIGN_KEY_COLS2 || ' = :OLD.' || FK.VIEW_KEY_COLS || ')'
        end AS VARCHAR2(512)) DELETE_SET_NULL_STAT,
        DECODE(DELETE_RULE, 'NO ACTION', 1, 'CASCADE', 2, 'SET NULL', 3) DELETE_SET_NULL_ORDER
    FROM (
        SELECT
            A.CONSTRAINT_NAME, A.OWNER,
            CASE WHEN B.VIEW_IS_CREATED = 'YES'
                THEN changelog_conf.Get_Base_Table_Name(B.SHORT_NAME2) ELSE B.TABLE_NAME END BASE_TABLE_NAME,
            A.TABLE_NAME TABLE_NAME,
            A.FOREIGN_KEY_COLS,
            A.FOREIGN_KEY_COLS2,
            P.TABLE_NAME R_TABLE_NAME,
            FV.VIEW_NAME R_VIEW_NAME,
            CAST(CASE WHEN P.VIEW_IS_CREATED = 'YES'
                THEN changelog_conf.Get_Base_Table_Name(P.SHORT_NAME2) ELSE P.TABLE_NAME
            END AS VARCHAR2(256)) R_SHORT_NAME,
            P.SHORT_NAME2 R_SHORT_NAME2,
            P.CONSTRAINT_TYPE R_CONSTRAINT_TYPE, -- referenced column constraint_type can be u or p
            P.UNIQUE_KEY_COLS,
            P.VIEW_KEY_COLS,
            CASE WHEN P.INCUDE_WORKSPACE_ID = 'YES'
            THEN changelog_conf.Get_ColumnWorkspace END KEY_PREFIX,
            CASE WHEN EXISTS (
                SELECT 'X' -- after migration a trigger to remember the set null clause exists
                FROM    SYS.USER_TRIGGERS TR
                WHERE   TR.TRIGGER_NAME = A.CONSTRAINT_NAME
                AND     TR.TABLE_NAME = P.TABLE_NAME
                AND     TR.TABLE_OWNER = A.OWNER
                AND     TR.TRIGGERING_EVENT = 'DELETE'
                AND     TR.BASE_OBJECT_TYPE = 'TABLE'
                AND	    A.DELETE_RULE = 'NO ACTION'
            ) THEN 'SET NULL' ELSE A.DELETE_RULE END DELETE_RULE,
            A.DEFERRABLE, A.DEFERRED,
            DECODE(A.STATUS, 'ENABLED', 'ENABLE', 'DISABLED', 'DISABLE') STATUS,
            DECODE(A.VALIDATED, 'VALIDATED', 'VALIDATE', 'NOT VALIDATED', 'NOVALIDATE') VALIDATED,
            -- SET NULL clause is removed and replaced by a trigger
            DECODE(A.DELETE_RULE, 'NO ACTION', NULL, 'CASCADE', 'ON DELETE CASCADE', 'SET NULL', NULL) DELETE_RULE_CLAUSE,
            '_VRK' || NULLIF(DENSE_RANK() OVER (PARTITION BY A.TABLE_NAME ORDER BY A.CONSTRAINT_NAME), 1) CONSTRAINT_EXT
        FROM (
            SELECT DISTINCT TABLE_NAME, TABLE_OWNER OWNER, CONSTRAINT_NAME, R_CONSTRAINT_NAME, DELETE_RULE, 
                DEFERRABLE, DEFERRED, STATUS, VALIDATED,
                LISTAGG(F.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY F.POSITION) 
                    OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME) FOREIGN_KEY_COLS,
                LISTAGG(case when F.COLUMN_NAME NOT IN (changelog_conf.Get_ColumnWorkspace, changelog_conf.Get_ColumnDeletedMark) then F.COLUMN_NAME end, ', ') WITHIN GROUP (ORDER BY F.POSITION) 
                    OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME) FOREIGN_KEY_COLS2
            FROM TABLE ( changelog_conf.FN_Pipe_Foreign_Key_Columns ) F
        ) A, MVBASE_ALTER_UNIQUEKEYS P, MVBASE_ALTER_UNIQUEKEYS B, MVBASE_VIEWS FV
        WHERE A.R_CONSTRAINT_NAME = P.CONSTRAINT_NAME -- reference target
        AND A.TABLE_NAME = B.TABLE_NAME
        AND A.TABLE_NAME = FV.TABLE_NAME(+) AND A.OWNER = FV.OWNER (+)-- initially the view does not exist
        AND P.CONSTRAINT_TYPE IN ('P', 'U')
        AND B.POSITION = 1
    ) FK
);

ALTER  TABLE MVBASE_FOREIGNKEYS ADD
 CONSTRAINT MVBASE_FOREIGNKEYS_UK UNIQUE (TABLE_NAME, R_TABLE_NAME, CONSTRAINT_NAME) USING INDEX COMPRESS 1;



/* Definition of foreign keys of VPD Views */
CREATE MATERIALIZED VIEW MVBASE_VIEW_FOREIGN_KEYS
    (VIEW_NAME, R_VIEW_NAME, FOREIGN_KEY_COLS, PRIMARY_KEY_COLS, R_SHORT_NAME, R_CONSTRAINT_TYPE, CONSTRAINT_NAME, CONSTRAINT_EXISTS,
    CREATE_STAT, DELETE_SET_NULL_STAT, DELETE_SET_NULL_ORDER, DELETE_RULE)
    BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
SELECT DISTINCT VIEW_NAME, R_VIEW_NAME, FOREIGN_KEY_COLS, PRIMARY_KEY_COLS, R_SHORT_NAME, R_CONSTRAINT_TYPE, CONSTRAINT_NAME,
    CONSTRAINT_EXISTS,
    CAST ('ALTER VIEW ' || changelog_conf.Get_View_Schema || VIEW_NAME || ' ADD CONSTRAINT '
    || changelog_conf.enquote_name(CONSTRAINT_NAME)
    || ' FOREIGN KEY (' || FOREIGN_KEY_COLS || ')'
    || ' REFERENCES ' || R_VIEW_NAME || '(' || PRIMARY_KEY_COLS || ') '
    || ' RELY DISABLE NOVALIDATE ' AS VARCHAR2(1024))
    CREATE_STAT,
    DELETE_SET_NULL_STAT, DELETE_SET_NULL_ORDER, DELETE_RULE
FROM (
	SELECT A.*,
		CASE WHEN C.CONSTRAINT_NAME IS NOT NULL THEN 'YES' ELSE 'NO' END CONSTRAINT_EXISTS
	FROM (
		SELECT  BV.VIEW_NAME, BV.SHORT_NAME || FK.CONSTRAINT_EXT CONSTRAINT_NAME,
				REPLACE(FK.FOREIGN_KEY_COLS,  changelog_conf.Get_ColumnWorkspace || ', ') FOREIGN_KEY_COLS,
				FV.VIEW_NAME R_VIEW_NAME,
				FV.SHORT_NAME R_SHORT_NAME,
				FK.R_CONSTRAINT_TYPE R_CONSTRAINT_TYPE,
				REPLACE(FK.PRIMARY_KEY_COLS,  changelog_conf.Get_ColumnWorkspace || ', ') PRIMARY_KEY_COLS,
				FK.DELETE_SET_NULL_STAT, FK.DELETE_SET_NULL_ORDER, FK.DELETE_RULE
		FROM MVBASE_VIEWS BV, MVBASE_FOREIGNKEYS FK, MVBASE_VIEWS FV
		WHERE BV.TABLE_NAME = FK.TABLE_NAME
		AND FK.R_TABLE_NAME = FV.TABLE_NAME
		AND FK.FOREIGN_KEY_COLS <> changelog_conf.Get_ColumnWorkspace
		AND BV.VIEW_NAME IS NOT NULL
	) A, SYS.USER_CONSTRAINTS C
    WHERE C.CONSTRAINT_NAME(+) = A.CONSTRAINT_NAME
    AND C.TABLE_NAME(+) = A.VIEW_NAME
    AND C.CONSTRAINT_TYPE(+) = 'R'
) A
WHERE REGEXP_COUNT(FOREIGN_KEY_COLS, ',') = REGEXP_COUNT(PRIMARY_KEY_COLS,',');

ALTER  TABLE MVBASE_VIEW_FOREIGN_KEYS ADD
 CONSTRAINT MVBASE_VIEW_FOREIGN_KEYS_PK PRIMARY KEY (VIEW_NAME, CONSTRAINT_NAME) USING INDEX COMPRESS 1;

CREATE INDEX MVBASE_VIEW_FOREIGN_KEYS_IND ON MVBASE_VIEW_FOREIGN_KEYS (R_VIEW_NAME) COMPRESS 1;

-- for each foreign key column determinate a unique key display value from the target table.
CREATE MATERIALIZED VIEW MVBASE_REFERENCES (TABLE_NAME, VIEW_NAME,
	COLUMN_NAME, COLUMN_ID, UNIQUE_KEY_COLS,
    R_TABLE_NAME, R_VIEW_NAME, R_PRIMARY_KEY_COLS, R_UNIQUE_KEY_COLS,
    R_COLUMN_NAME,
    R_COLUMN_NAMES, R_MEMBERS,
    U_COLUMN_NAMES, U_CONSTRAINT_NAME, U_MEMBERS)
    BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS -- find target descriptions using base tables
WITH UNIQUE_KEYS AS ( -- find unique column expression for referenced table
    SELECT B.TABLE_NAME, B.CONSTRAINT_NAME,
        COUNT(DISTINCT B.COLUMN_NAME) MEMBERS,
        COUNT(DISTINCT B.COLUMN_PATTERN) MATCHING,
        DENSE_RANK() OVER (PARTITION BY B.TABLE_NAME ORDER BY COUNT(DISTINCT B.COLUMN_PATTERN) DESC, B.CONSTRAINT_NAME) RANK,
        LISTAGG(B.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY B.POSITION) COLUMN_NAMES
    FROM (
        SELECT DISTINCT B.TABLE_NAME, B.CONSTRAINT_NAME, B.CONSTRAINT_TYPE, B.COLUMN_NAME, B.POSITION, N.COLUMN_VALUE COLUMN_PATTERN
        FROM TABLE( changelog_conf.FN_Pipe_unique_keys ) B
        , TABLE( changelog_conf.in_list(changelog_conf.Get_ReferenceDescriptionCols, ',')) N
        WHERE B.COLUMN_NAME LIKE N.COLUMN_VALUE (+) ESCAPE '\'
        AND B.COLUMN_NAME NOT IN ( changelog_conf.Get_ColumnDeletedMark, changelog_conf.Get_ColumnWorkspace)
    ) B
    HAVING COUNT(DISTINCT B.COLUMN_NAME) > 1 OR MAX(CONSTRAINT_TYPE) = 'U' -- used columns of the primary key only for composed keys
    GROUP BY B.TABLE_NAME, B.CONSTRAINT_NAME
),
DESCRIPTION_KEYS AS ( -- find columns that match a name in g_ReferenceDescriptionCols for referenced table
    SELECT B.TABLE_NAME,
        COUNT(DISTINCT B.COLUMN_NAME) MEMBERS,
        B.FIRST_COLUMN_NAME COLUMN_NAME,
        LISTAGG(B.COLUMN_NAME, ',') WITHIN GROUP (ORDER BY B.COLUMN_ID) COLUMN_NAMES
    FROM (
        SELECT DISTINCT D.TABLE_NAME, D.COLUMN_NAME, D.COLUMN_ID,
            FIRST_VALUE(D.COLUMN_NAME) OVER (PARTITION BY D.TABLE_NAME ORDER BY N.RN, D.COLUMN_ID) FIRST_COLUMN_NAME
        FROM (SELECT ROWNUM RN, COLUMN_VALUE COLUMN_PATTERN
            FROM TABLE( changelog_conf.in_list(changelog_conf.Get_ReferenceDescriptionCols, ','))
        ) N
        , SYS.USER_TAB_COLUMNS D WHERE D.COLUMN_NAME LIKE N.COLUMN_PATTERN ESCAPE '\'
		AND changelog_conf.Match_Column_Pattern(D.COLUMN_NAME, changelog_conf.Get_ColumnWorkspace_List) = 'NO'
		AND changelog_conf.Match_Column_Pattern(D.COLUMN_NAME, changelog_conf.Get_ColumnDeletedMark_List) = 'NO'
		AND changelog_conf.Match_Column_Pattern(D.COLUMN_NAME, changelog_conf.Get_ColumnCreateUser_List) = 'NO'
		AND changelog_conf.Match_Column_Pattern(D.COLUMN_NAME, changelog_conf.Get_ColumnCreateDate_List) = 'NO'
		AND changelog_conf.Match_Column_Pattern(D.COLUMN_NAME, changelog_conf.Get_ColumnModifyUser_List) = 'NO'
		AND changelog_conf.Match_Column_Pattern(D.COLUMN_NAME, changelog_conf.Get_ColumnModifyDate_List) = 'NO'
    ) B
    GROUP BY B.TABLE_NAME, B.FIRST_COLUMN_NAME
)
SELECT DISTINCT
	F.TABLE_NAME,
	F.VIEW_NAME,
    CAST(F.FOREIGN_KEY_COLS AS VARCHAR2(500)) COLUMN_NAME,
    T.COLUMN_ID,
    F.UNIQUE_KEY_COLS,
    F.R_TABLE_NAME,
    F.R_VIEW_NAME,
    F.R_PRIMARY_KEY_COLS,
    F.R_UNIQUE_KEY_COLS,
    C.COLUMN_NAME R_COLUMN_NAME,
    C.COLUMN_NAMES R_COLUMN_NAMES,
    C.MEMBERS R_MEMBERS,
    U.COLUMN_NAMES U_COLUMN_NAMES,
    U.CONSTRAINT_NAME U_CONSTRAINT_NAME,
    U.MEMBERS U_MEMBERS
FROM (
	SELECT S.TABLE_NAME,
		S.VIEW_NAME,
		S.PRIMARY_KEY_COLS UNIQUE_KEY_COLS,
		F.FOREIGN_KEY_COLS,
		F.R_TABLE_NAME,
		D.VIEW_NAME R_VIEW_NAME,
		D.PRIMARY_KEY_COLS R_UNIQUE_KEY_COLS,
		F.PRIMARY_KEY_COLS R_PRIMARY_KEY_COLS,
		'R' CONSTRAINT_TYPE
	FROM MVBASE_FOREIGNKEYS F, MVBASE_VIEWS S, MVBASE_VIEWS D
	WHERE F.TABLE_NAME = S.TABLE_NAME AND S.EXCLUDED_TABLE = 'NO'
	AND F.R_TABLE_NAME = D.TABLE_NAME AND D.EXCLUDED_TABLE = 'NO'
	UNION
	SELECT
		S.TABLE_NAME,
		S.VIEW_NAME,
		S.PRIMARY_KEY_COLS UNIQUE_KEY_COLS,
		F.FOREIGN_KEY_COLS,
		D.TABLE_NAME R_TABLE_NAME,
		F.R_VIEW_NAME R_VIEW_NAME,
		D.PRIMARY_KEY_COLS R_UNIQUE_KEY_COLS,
		F.PRIMARY_KEY_COLS R_PRIMARY_KEY_COLS,
		'R' CONSTRAINT_TYPE
	FROM MVBASE_VIEW_FOREIGN_KEYS F, MVBASE_VIEWS S, MVBASE_VIEWS D
	WHERE F.VIEW_NAME = S.VIEW_NAME AND S.EXCLUDED_TABLE = 'NO'
	AND F.R_VIEW_NAME = D.VIEW_NAME AND D.EXCLUDED_TABLE = 'NO'
) F
, SYS.USER_TAB_COLUMNS T
, DESCRIPTION_KEYS C
, UNIQUE_KEYS U
WHERE F.TABLE_NAME = T.TABLE_NAME AND F.FOREIGN_KEY_COLS = T.COLUMN_NAME -- only use foreign keys with single column
AND C.TABLE_NAME (+) = F.R_TABLE_NAME
AND U.TABLE_NAME (+) = F.R_TABLE_NAME AND U.RANK (+) = 1 -- use first unique constraint by count of matches, Constraint_Name
;

ALTER  TABLE MVBASE_REFERENCES ADD
 CONSTRAINT MVBASE_REFERENCES_PK PRIMARY KEY (VIEW_NAME, COLUMN_NAME, R_VIEW_NAME, R_PRIMARY_KEY_COLS) USING INDEX COMPRESS 1;

