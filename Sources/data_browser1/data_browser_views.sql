/*
Copyright 2019 Dirk Strack, Strack Software Development

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

DECLARE
	PROCEDURE DROP_MVIEW( p_MView_Name VARCHAR2) IS
		time_limit_exceeded EXCEPTION;
		PRAGMA EXCEPTION_INIT (time_limit_exceeded, -40); -- ORA-04021: timeout occurred while waiting to lock object 
		mview_does_not_exist EXCEPTION;
		PRAGMA EXCEPTION_INIT (mview_does_not_exist, -12003); -- ORA-12003: materialized view does not exist
		v_count NUMBER := 0;
	BEGIN		
		LOOP 
			BEGIN 
				EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW ' || p_MView_Name;
        		-- DBMS_OUTPUT.PUT_LINE('DROP MATERIALIZED VIEW ' || p_MView_Name || ';');
        		EXIT;
			EXCEPTION
				WHEN time_limit_exceeded THEN 
					APEX_UTIL.PAUSE(1/2);
					v_count := v_count + 1;
					EXIT WHEN v_count > 10;
				WHEN mview_does_not_exist THEN
					EXIT;
			END;
		END LOOP;
	END;
BEGIN
	DROP_MVIEW('MVDATA_BROWSER_SIMPLE_COLS');
	DROP_MVIEW('MVDATA_BROWSER_DESCRIPTIONS');
	DROP_MVIEW('MVDATA_BROWSER_FC_REFS'); -- old name
	DROP_MVIEW('MVDATA_BROWSER_U_REFS');
	DROP_MVIEW('MVDATA_BROWSER_F_REFS');
	DROP_MVIEW('MVDATA_BROWSER_D_REFS');
	DROP_MVIEW('MVDATA_BROWSER_FKEYS');
	DROP_MVIEW('MVDATA_BROWSER_QC_REFS'); -- old name
	DROP_MVIEW('MVDATA_BROWSER_CHECKS_DEFS');
	DROP_MVIEW('MVDATA_BROWSER_VIEWS');
	DROP_MVIEW('MVDATA_BROWSER_REFERENCES');
END;
/

CREATE MATERIALIZED VIEW MVDATA_BROWSER_VIEWS (
	VIEW_NAME, VIEW_OWNER, TABLE_NAME, TABLE_OWNER, PRIMARY_KEY_COLS, SEARCH_KEY_COLS, RUN_NO, SHORT_NAME, 
	CONSTRAINT_NAME, CONSTRAINT_TYPE, IS_CANDIDATE_KEY, IS_REFERENCED_KEY, REFERENCES_COUNT, 
	IS_INDEX_ORGANIZED, KEY_HAS_NEXTVAL, KEY_HAS_SYS_GUID,
	SEQUENCE_OWNER, SEQUENCE_NAME, HAS_SCALAR_PRIMARY_KEY, HAS_SERIAL_PRIMARY_KEY, KEY_COLS_COUNT, 
	HAS_SCALAR_KEY, SCALAR_KEY_COLUMN, IS_ADMIN_TABLE,
	ROW_VERSION_COLUMN_NAME, ROW_LOCKED_COLUMN_NAME, SOFT_LOCK_COLUMN_NAME, SOFT_DELETED_COLUMN_NAME, FLIP_STATE_COLUMN_NAME,
	ORDERING_COLUMN_NAME, ACTIVE_LOV_COLUMN_NAME, HTML_FIELD_COLUMN_NAME, CALEND_START_DATE_COLUMN_NAME, CALENDAR_END_DATE_COLUMN_NAME,
	FILE_NAME_COLUMN_NAME, MIME_TYPE_COLUMN_NAME, FILE_DATE_COLUMN_NAME, FILE_CONTENT_COLUMN_NAME, FILE_THUMBNAIL_COLUMN_NAME,
	FILE_FOLDER_COLUMN_NAME, FOLDER_NAME_COLUMN_NAME, FOLDER_PARENT_COLUMN_NAME,
	FILE_PRIVILEGE_COLUMN_NAME, INDEX_FORMAT_COLUMN_NAME, AUDIT_DATE_COLUMN_NAME, AUDIT_USER_COLUMN_NAME,
	COLUMN_PREFIX, 
	NUM_ROWS, READ_ONLY
)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
WITH BASE_UNIQUEKEYS AS (
	SELECT T.*,
		DENSE_RANK() OVER (PARTITION BY TABLE_NAME, TABLE_OWNER
			ORDER BY 
				REFERENCES_COUNT DESC, -- prefer referenced keys
				CONSTRAINT_TYPE ASC, -- prefer primary keys 
				CASE WHEN HAS_SCALAR_KEY = 'YES' THEN 0 ELSE 1 END,
				IS_CANDIDATE_KEY DESC, 
				CONSTRAINT_NAME ASC) POSITION,
		SUM(REFERENCES_COUNT) OVER (PARTITION BY TABLE_NAME, TABLE_OWNER) TABLE_REFERENCES_COUNT -- sum of fk references for all unique keys
	FROM (
		SELECT T.*,
            RTRIM(SUBSTR(BASE_NAME, 1, 23), '_' || RUN_NO) || RUN_NO SHORT_NAME,
            case when CONSTRAINT_TYPE = 'P' OR (CONSTRAINT_TYPE = 'U' AND HAS_NULLABLE = 0)
                then 'YES' else 'NO' end  IS_CANDIDATE_KEY,
            case when TABLESPACE_NAME IS NULL
            	then 'YES' else 'NO'
            end IS_INDEX_ORGANIZED
		from TABLE ( data_browser_pipes.FN_Pipe_Table_Uniquekeys ) T
	) T
),
SCALAR_KEYS AS (
	select TABLE_NAME, TABLE_OWNER,
		UNIQUE_KEY_COLS SCALAR_KEY_COLUMN, HAS_SCALAR_KEY,
		SEQUENCE_OWNER, SEQUENCE_NAME,
		DENSE_RANK() OVER (PARTITION BY TABLE_NAME, TABLE_OWNER
			ORDER BY 
				CONSTRAINT_TYPE DESC, -- prefer UNIQUE keys 
				KEY_HAS_NEXTVAL DESC, 
				KEY_HAS_SYS_GUID DESC,
				HAS_NULLABLE ASC,
				CONSTRAINT_NAME ASC) POSITION
	FROM MVBASE_UNIQUE_KEYS SK
	WHERE SK.HAS_SCALAR_KEY = 'YES'
)
SELECT VIEW_NAME, VIEW_OWNER, TABLE_NAME, TABLE_OWNER, PRIMARY_KEY_COLS, 
	NVL(SCALAR_KEY_COLUMN, PRIMARY_KEY_COLS) SEARCH_KEY_COLS,
	RUN_NO, SHORT_NAME, 
	CONSTRAINT_NAME, CONSTRAINT_TYPE, IS_CANDIDATE_KEY, 
	case when REFERENCES_COUNT > 0 then 'YES' else 'NO' end  IS_REFERENCED_KEY, 
	TABLE_REFERENCES_COUNT REFERENCES_COUNT, 
	IS_INDEX_ORGANIZED, KEY_HAS_NEXTVAL, KEY_HAS_SYS_GUID,
	SEQUENCE_OWNER, SEQUENCE_NAME,
	NVL(HAS_SCALAR_PRIMARY_KEY, 'NO') HAS_SCALAR_PRIMARY_KEY,
	NVL(HAS_SERIAL_PRIMARY_KEY, 'NO') HAS_SERIAL_PRIMARY_KEY,
	case when SCALAR_KEY_COLUMN IS NOT NULL 
		then 1 else KEY_COLS_COUNT 
	end KEY_COLS_COUNT,
	NVL(HAS_SCALAR_KEY, 'NO') HAS_SCALAR_KEY,
	SCALAR_KEY_COLUMN,
	case when data_browser_pattern.Match_Admin_Tables(VIEW_NAME) = 'YES'
		then 'Y' else 'N'
	end IS_ADMIN_TABLE,
	ROW_VERSION_COLUMN_NAME, ROW_LOCKED_COLUMN_NAME, SOFT_LOCK_COLUMN_NAME, SOFT_DELETED_COLUMN_NAME, FLIP_STATE_COLUMN_NAME,
	ORDERING_COLUMN_NAME, ACTIVE_LOV_COLUMN_NAME, HTML_FIELD_COLUMN_NAME, CALEND_START_DATE_COLUMN_NAME, CALENDAR_END_DATE_COLUMN_NAME,
	FILE_NAME_COLUMN_NAME, MIME_TYPE_COLUMN_NAME, FILE_DATE_COLUMN_NAME, FILE_CONTENT_COLUMN_NAME, FILE_THUMBNAIL_COLUMN_NAME,
	FILE_FOLDER_COLUMN_NAME, FOLDER_NAME_COLUMN_NAME, FOLDER_PARENT_COLUMN_NAME, 
	FILE_PRIVILEGE_COLUMN_NAME, INDEX_FORMAT_COLUMN_NAME, AUDIT_DATE_COLUMN_NAME, AUDIT_USER_COLUMN_NAME,
	COLUMN_PREFIX, 			
	case when NOT(T.VIEW_NAME = T.TABLE_NAME and T.VIEW_OWNER = T.TABLE_OWNER) 
		then data_browser_conf.FN_Query_Cardinality(T.VIEW_NAME) else NVL(NUM_ROWS, 0)
	end NUM_ROWS,
	READ_ONLY
FROM (
	SELECT /*+ USE_MERGE(PK S RV SK) */ 
		NVL(S.VIEW_NAME, PK.TABLE_NAME) VIEW_NAME, 
		NVL(S.VIEW_OWNER, PK.TABLE_OWNER) VIEW_OWNER,
		PK.TABLE_NAME, PK.TABLE_OWNER,
		PK.UNIQUE_KEY_COLS PRIMARY_KEY_COLS,
		S.RUN_NO,
		NVL(S.SHORT_NAME, PK.SHORT_NAME) SHORT_NAME,
		PK.CONSTRAINT_NAME, 
		PK.CONSTRAINT_TYPE, 
		PK.IS_CANDIDATE_KEY, PK.REFERENCES_COUNT, PK.TABLE_REFERENCES_COUNT,
		PK.IS_INDEX_ORGANIZED, PK.KEY_HAS_NEXTVAL, PK.KEY_HAS_SYS_GUID,
		SK.SCALAR_KEY_COLUMN, SK.HAS_SCALAR_KEY,
		SK.SEQUENCE_OWNER, SK.SEQUENCE_NAME,
		PK.HAS_SCALAR_KEY HAS_SCALAR_PRIMARY_KEY, 
		PK.HAS_SERIAL_KEY HAS_SERIAL_PRIMARY_KEY, 
		PK.KEY_COLS_COUNT,
		RV.ROW_VERSION_COLUMN_NAME,
		RV.ROW_LOCKED_COLUMN_NAME,
		RV.SOFT_LOCK_COLUMN_NAME,
		RV.SOFT_DELETED_COLUMN_NAME,
		RV.FLIP_STATE_COLUMN_NAME,
		RV.ORDERING_COLUMN_NAME,
		RV.ACTIVE_LOV_COLUMN_NAME,
		RV.HTML_FIELD_COLUMN_NAME,
		RV.CALEND_START_DATE_COLUMN_NAME, 
		RV.CALENDAR_END_DATE_COLUMN_NAME,
		RV.FILE_NAME_COLUMN_NAME,
		RV.MIME_TYPE_COLUMN_NAME,
		RV.FILE_DATE_COLUMN_NAME,
		RV.FILE_CONTENT_COLUMN_NAME,
		RV.FILE_THUMBNAIL_COLUMN_NAME,
		RV.FILE_FOLDER_COLUMN_NAME,
		RV.FOLDER_NAME_COLUMN_NAME,
		RV.FOLDER_PARENT_COLUMN_NAME,
		RV.FILE_PRIVILEGE_COLUMN_NAME, 
		RV.INDEX_FORMAT_COLUMN_NAME, 
		RV.AUDIT_DATE_COLUMN_NAME, 
		RV.AUDIT_USER_COLUMN_NAME,
		RV.COLUMN_PREFIX, 
		PK.NUM_ROWS,
		PK.READ_ONLY
	FROM BASE_UNIQUEKEYS PK, SCALAR_KEYS SK,
		TABLE (data_browser_pipes.FN_Pipe_Mapping_Views) S,
		TABLE (data_browser_pipes.FN_Pipe_Special_Columns ) RV 
	WHERE PK.TABLE_NAME = S.TABLE_NAME (+) AND PK.TABLE_OWNER = S.TABLE_OWNER (+)
	AND PK.TABLE_NAME = RV.TABLE_NAME (+) AND PK.TABLE_OWNER = RV.TABLE_OWNER (+) 
	AND PK.POSITION = 1
	AND PK.TABLE_NAME = SK.TABLE_NAME (+) AND PK.TABLE_OWNER = SK.TABLE_OWNER (+) AND SK.POSITION (+) = 1
) T
WHERE VIEW_OWNER = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA');

ALTER TABLE MVDATA_BROWSER_VIEWS ADD
 CONSTRAINT MVDATA_BROWSER_VIEWS_PK PRIMARY KEY (VIEW_NAME) USING INDEX;

CREATE INDEX MVDATA_BROWSER_VIEWS_IND ON MVDATA_BROWSER_VIEWS(VIEW_NAME, PRIMARY_KEY_COLS);
CREATE INDEX MVDATA_BROWSER_VIEWS_IND2 ON MVDATA_BROWSER_VIEWS(TABLE_NAME, TABLE_OWNER);
CREATE INDEX MVDATA_BROWSER_VIEWS_IND3 ON MVDATA_BROWSER_VIEWS(CONSTRAINT_NAME, HAS_SCALAR_PRIMARY_KEY);

-- List of column names for each user table that match a pattern in the list of Reference Description Cols configuration list.
CREATE MATERIALIZED VIEW MVDATA_BROWSER_D_REFS
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS -- find columns that match a name in Get_Display_Columns_Pattern for referenced table
SELECT DISTINCT S.VIEW_NAME, S.TABLE_NAME, D.COLUMN_NAME, D.COLUMN_ID,
	MIN(N.POSITION) OVER (PARTITION BY D.TABLE_NAME, D.COLUMN_NAME) POSITION,
	D.DATA_TYPE, D.DATA_PRECISION, D.NULLABLE, D.DATA_SCALE, D.CHAR_LENGTH, D.DEFAULT_LENGTH, D.VIRTUAL_COLUMN,
	COUNT(DISTINCT D.COLUMN_NAME) OVER (PARTITION BY D.TABLE_NAME) MEMBERS,
	0 MATCHING,
	SUM(case when D.NULLABLE = 'Y' then 1 else 0 end) OVER (PARTITION BY D.TABLE_NAME) HAS_NULLABLE
FROM (SELECT ROWNUM POSITION, COLUMN_VALUE COLUMN_PATTERN
		FROM TABLE( data_browser_conf.in_list(data_browser_pattern.Get_Display_Columns_Pattern, ',')
	)
) N
JOIN SYS.ALL_TAB_COLS D ON D.COLUMN_NAME LIKE N.COLUMN_PATTERN ESCAPE '\'
JOIN MVDATA_BROWSER_VIEWS S ON S.VIEW_NAME = D.TABLE_NAME AND S.VIEW_OWNER = D.OWNER -- only columns that appear in the view
WHERE data_browser_pattern.Match_Ignored_Columns(D.COLUMN_NAME) = 'NO'
AND data_browser_pattern.Match_Hidden_Columns(D.COLUMN_NAME) = 'NO'
AND D.HIDDEN_COLUMN = 'NO';

ALTER TABLE MVDATA_BROWSER_D_REFS ADD
 CONSTRAINT MVDATA_BROWSER_TAB_D_REFS_PK PRIMARY KEY (VIEW_NAME, COLUMN_NAME) USING INDEX COMPRESS 1;
COMMENT ON MATERIALIZED VIEW MVDATA_BROWSER_D_REFS IS
'List of displayed column names for each user table. The columns names match a pattern in the list of Reference Description Cols configuration list.';

CREATE MATERIALIZED VIEW MVDATA_BROWSER_U_REFS (
	VIEW_NAME, TABLE_NAME, TABLE_OWNER, COLUMN_NAME, 
	POSITION, NULLABLE, COLUMN_ID, DATA_TYPE, 
	DATA_PRECISION, DATA_SCALE, CHAR_LENGTH, DEFAULT_LENGTH, VIRTUAL_COLUMN,
	U_CONSTRAINT_NAME, U_MEMBERS, MATCHING, 
	HAS_NULLABLE, CONSTRAINT_TYPE, INDEX_OWNER, INDEX_NAME, RANK)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS select VIEW_NAME, TABLE_NAME, TABLE_OWNER, COLUMN_NAME, 
	POSITION, NULLABLE, COLUMN_ID, DATA_TYPE, 
	DATA_PRECISION, DATA_SCALE, CHAR_LENGTH, DEFAULT_LENGTH, VIRTUAL_COLUMN,
	U_CONSTRAINT_NAME, U_MEMBERS, MATCHING, 
	HAS_NULLABLE, CONSTRAINT_TYPE, INDEX_OWNER, INDEX_NAME, RANK
from table (data_browser_pipes.FN_Pipe_Unique_Ref_Columns);

ALTER TABLE MVDATA_BROWSER_U_REFS ADD
  CONSTRAINT MVDATA_BROWSER_TAB_U_REFS_PK PRIMARY KEY (VIEW_NAME, COLUMN_NAME, U_CONSTRAINT_NAME) USING INDEX COMPRESS 1;

CREATE INDEX MVDATA_BROWSER_U_REFS_IND ON MVDATA_BROWSER_U_REFS(TABLE_NAME, TABLE_OWNER);

COMMENT ON MATERIALIZED VIEW MVDATA_BROWSER_U_REFS IS
'List of displayed column names for each user table. The column names are members of unique key definitions';

-- foreign keys with description columns
CREATE MATERIALIZED VIEW MVDATA_BROWSER_FKEYS (
	TABLE_NAME, OWNER, VIEW_NAME, UNIQUE_KEY_COLS, FOREIGN_KEY_COLS, FK_COLUMN_NAME, NORM_COLUMN_NAME, 
	FK_COLUMN_COUNT, FK_COLUMN_ID, FK_NULLABLE, CONSTRAINT_NAME, DELETE_RULE,
	R_TABLE_NAME, R_VIEW_NAME, R_CONSTRAINT_TYPE, R_UNIQUE_KEY_COLS, R_PRIMARY_KEY_COLS, R_IS_ADMIN_TABLE
)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
SELECT TABLE_NAME, OWNER, VIEW_NAME, UNIQUE_KEY_COLS, FOREIGN_KEY_COLS, FK_COLUMN_NAME, NORM_COLUMN_NAME, 
	FK_COLUMN_COUNT, FK_COLUMN_ID,
	case when FK_NULLABLE_COUNT > 0 then 'Y' else 'N' end FK_NULLABLE, 
	CONSTRAINT_NAME, DELETE_RULE,
	R_TABLE_NAME, R_VIEW_NAME, R_CONSTRAINT_TYPE, R_UNIQUE_KEY_COLS, R_PRIMARY_KEY_COLS, R_IS_ADMIN_TABLE
FROM (
	SELECT F.*,
		DENSE_RANK() OVER (PARTITION BY F.TABLE_NAME, F.OWNER, F.FOREIGN_KEY_COLS ORDER BY F.R_TABLE_NAME, F.R_PRIMARY_KEY_COLS) FK_RANK
	FROM (
		SELECT DISTINCT F.TABLE_NAME, F.OWNER,
			F.VIEW_NAME,
			F.UNIQUE_KEY_COLS,
			F.FOREIGN_KEY_COLS,
			F.FK_COLUMN_NAME,
			data_browser_conf.Normalize_Column_Name(p_Column_Name => F.FK_COLUMN_NAME, p_Remove_Prefix => F.COLUMN_PREFIX) NORM_COLUMN_NAME,
			F.FK_COLUMN_COUNT,
			F.FK_COLUMN_ID,
			F.FK_NULLABLE_COUNT,
			F.CONSTRAINT_NAME, F.DELETE_RULE,
			PC.TABLE_NAME R_TABLE_NAME,
			T.VIEW_NAME R_VIEW_NAME,
			PC.CONSTRAINT_TYPE R_CONSTRAINT_TYPE,
			T.SEARCH_KEY_COLS R_UNIQUE_KEY_COLS,
			CAST(PC.VIEW_KEY_COLS AS VARCHAR2(512)) R_PRIMARY_KEY_COLS,
			case when data_browser_pattern.Match_Admin_Tables(T.VIEW_NAME) = 'YES'
				then 'Y' ELSE 'N'
			end R_IS_ADMIN_TABLE
		FROM (
			SELECT F.TABLE_NAME, F.TABLE_OWNER OWNER,
				S.VIEW_NAME, S.COLUMN_PREFIX,
				S.SEARCH_KEY_COLS UNIQUE_KEY_COLS,
				CAST(LISTAGG(F.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY F.POSITION) OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME) AS VARCHAR2(512) ) FOREIGN_KEY_COLS,
				FIRST_VALUE(F.COLUMN_NAME) OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME ORDER BY F.POSITION) FK_COLUMN_NAME,
				COUNT(DISTINCT F.COLUMN_NAME)  OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME) FK_COLUMN_COUNT,
				FIRST_VALUE(F.COLUMN_ID) OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME ORDER BY F.POSITION) FK_COLUMN_ID,
				SUM(case when F.NULLABLE = 'Y' then 1 else 0 end) OVER (PARTITION BY F.TABLE_NAME, F.TABLE_OWNER, F.CONSTRAINT_NAME) FK_NULLABLE_COUNT,
				F.CONSTRAINT_NAME, F.R_CONSTRAINT_NAME, F.R_OWNER, F.DELETE_RULE
			FROM MVDATA_BROWSER_VIEWS S
            JOIN TABLE ( changelog_conf.FN_Pipe_Foreign_Key_Columns ) F ON S.TABLE_NAME = F.TABLE_NAME AND S.TABLE_OWNER = F.TABLE_OWNER
		) F
		JOIN MVBASE_UNIQUE_KEYS PC ON F.R_OWNER = PC.TABLE_OWNER AND F.R_CONSTRAINT_NAME = PC.CONSTRAINT_NAME 
		JOIN MVDATA_BROWSER_VIEWS T ON T.TABLE_NAME = PC.TABLE_NAME AND T.TABLE_OWNER = PC.TABLE_OWNER
	) F
) WHERE FK_RANK = 1
;


ALTER TABLE MVDATA_BROWSER_FKEYS ADD
 CONSTRAINT MVDATA_BROWSER_FKEYS_PK PRIMARY KEY (VIEW_NAME, CONSTRAINT_NAME) USING INDEX;

CREATE INDEX MVDATA_BROWSER_FKEYS_IND ON MVDATA_BROWSER_FKEYS(VIEW_NAME, FOREIGN_KEY_COLS);
CREATE INDEX MVDATA_BROWSER_FKEYS_IND2 ON MVDATA_BROWSER_FKEYS(R_VIEW_NAME);

CREATE OR REPLACE VIEW VDATA_BROWSER_DISPLAY_COLS
AS
	SELECT B.VIEW_NAME, B.TABLE_NAME, B.TABLE_OWNER,
		A.COLUMN_NAME, A.COLUMN_ID, A.NULLABLE, A.NUM_DISTINCT,
		A.DATA_TYPE, A.DATA_PRECISION, A.CHAR_LENGTH, A.DATA_SCALE, A.VIRTUAL_COLUMN, A.DEFAULT_LENGTH,
		DENSE_RANK() OVER (PARTITION BY A.TABLE_NAME ORDER BY A.COLUMN_ID) COL_RANK
	FROM MVDATA_BROWSER_VIEWS B
	JOIN TABLE (data_browser_pipes.FN_Pipe_Table_Columns) A ON B.VIEW_NAME = A.TABLE_NAME AND A.TABLE_OWNER = B.VIEW_OWNER -- only columns that appear in the view
	WHERE ((A.DATA_TYPE IN ('VARCHAR2', 'VARCHAR', 'NVARCHAR2', 'CHAR', 'NCHAR')
	AND A.CHAR_LENGTH < 2000)
	 OR A.DATA_TYPE IN ('NUMBER', 'FLOAT', 'DATE')
	 OR A.DATA_TYPE LIKE 'TIMESTAMP%')
	AND A.HIDDEN_COLUMN = 'NO'
	AND A.COLUMN_ID <= data_browser_conf.Get_Collection_Columns_Limit
	AND NOT (A.COLUMN_NAME = B.PRIMARY_KEY_COLS AND HAS_SCALAR_PRIMARY_KEY = 'YES')
	AND NOT (A.COLUMN_NAME = B.SCALAR_KEY_COLUMN AND SEQUENCE_NAME IS NOT NULL)
	AND data_browser_pattern.Match_Ignored_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Hidden_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Data_Deduction_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Row_Version_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Row_Lock_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Soft_Delete_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Audit_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Active_Lov_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_Mime_Type_Columns(A.COLUMN_NAME) = 'NO'
	AND data_browser_pattern.Match_File_Created_Columns(A.COLUMN_NAME) = 'NO'
;

CREATE OR REPLACE VIEW VDATA_BROWSER_SIMPLE_CONS
AS
SELECT TABLE_NAME, TABLE_OWNER, COLUMN_NAME, CONSTRAINT_NAME, CHECK_CONDITION
FROM ( -- check constraints for Get_Yes_No_Column_Type
	SELECT TABLE_NAME, TABLE_OWNER, COLUMN_NAME,
		FIRST_VALUE(CONSTRAINT_NAME) OVER (PARTITION BY TABLE_NAME, COLUMN_NAME ORDER BY CONSTRAINT_NAME) CONSTRAINT_NAME,
		FIRST_VALUE(SEARCH_CONDITION_VC) OVER (PARTITION BY TABLE_NAME, COLUMN_NAME ORDER BY CONSTRAINT_NAME) CHECK_CONDITION,
		COUNT(DISTINCT COLUMN_NAME) OVER (PARTITION BY TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME) CONS_COLS_COUNT,
		COUNT(DISTINCT SEARCH_CONDITION_VC) OVER (PARTITION BY TABLE_NAME, COLUMN_NAME) CONS_COUNT
	FROM (
		SELECT B.TABLE_NAME, B.OWNER TABLE_OWNER, B.COLUMN_NAME, B.CONSTRAINT_NAME, B.SEARCH_CONDITION SEARCH_CONDITION_VC
		FROM TABLE ( data_browser_conf.Constraint_Columns_Cursor ) B 
	) A
)
WHERE CONS_COLS_COUNT = 1 -- simple constraint references only one column_name
AND CONS_COUNT = 1
;


CREATE MATERIALIZED VIEW MVDATA_BROWSER_DESCRIPTIONS (
	VIEW_NAME, VIEW_OWNER, TABLE_NAME, TABLE_OWNER, SHORT_NAME,
	HAS_SCALAR_PRIMARY_KEY, PRIMARY_KEY_COLS, SEARCH_KEY_COLS,
	HAS_SCALAR_KEY, SCALAR_KEY_COLUMN, SEQUENCE_OWNER, SEQUENCE_NAME, CONSTRAINT_NAME,
	IS_ADMIN_TABLE, IS_REFERENCED_KEY, REFERENCES_COUNT, UNIQUE_COLUMN_NAMES, MATCHING_COLUMN_NAMES,
	CHAR_COLUMN_NAMES, DISPLAYED_COLUMN_NAMES, ACTIVE_LOV_COLUMN_NAME, ACTIVE_LOV_DATA_TYPE, 
	HTML_FIELD_COLUMN_NAME, FILE_FOLDER_COLUMN_NAME, FILE_CONTENT_COLUMN_NAME,
	FOLDER_PARENT_COLUMN_NAME, FOLDER_CONTAINER_COLUMN_NAME, FOLDER_NAME_COLUMN_NAME,
	ORDERING_COLUMN_NAME, CALEND_START_DATE_COLUMN_NAME, CALENDAR_END_DATE_COLUMN_NAME,
	SUMMAND_COLUMN_NAME,MINUEND_COLUMN_NAME,FACTORS_COLUMN_NAME,
	KEY_COLS_COUNT, COLUMN_CNT, COLUMN_PREFIX, HAS_NULLABLE, HAS_SIMPLE_UNIQUE, U_CONSTRAINT_NAME, 
	NUM_ROWS, READ_ONLY, COMMENTS
)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
WITH TABLES_D_REFS AS (
	SELECT DISTINCT C.VIEW_NAME,
		LISTAGG(C.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY C.COLUMN_ID) OVER (PARTITION BY C.VIEW_NAME) MATCHING_COLUMN_NAMES,
		C.MEMBERS COLUMN_CNT,
		C.HAS_NULLABLE,
		case when COUNT(DISTINCT B.COLUMN_NAME) OVER (PARTITION BY C.VIEW_NAME) = 1
			and C.MEMBERS = 1 then 1 else 0 end HAS_SIMPLE_UNIQUE,
		MAX(B.U_CONSTRAINT_NAME) OVER (PARTITION BY C.VIEW_NAME) U_CONSTRAINT_NAME
    FROM MVDATA_BROWSER_D_REFS C
    	, MVDATA_BROWSER_U_REFS B 
    	WHERE C.TABLE_NAME = B.TABLE_NAME (+) AND C.COLUMN_NAME = B.COLUMN_NAME (+)
), TABLES_U_REFS AS (
    SELECT DISTINCT C.VIEW_NAME,
		LISTAGG(C.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY C.POSITION) OVER (PARTITION BY C.VIEW_NAME) UNIQUE_COLUMN_NAMES,
		C.U_MEMBERS COLUMN_CNT,
		C.HAS_NULLABLE,
		case when C.U_MEMBERS = 1 then 1 else 0 end HAS_SIMPLE_UNIQUE,
		C.U_CONSTRAINT_NAME
	FROM MVDATA_BROWSER_U_REFS C
    WHERE C.RANK = 1
), TABLES_C_REFS AS (
	SELECT DISTINCT A.VIEW_NAME,
		LISTAGG(A.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY A.COLUMN_ID) CHAR_COLUMN_NAMES,
		COUNT(DISTINCT A.COLUMN_NAME) COLUMN_CNT,
		SUM(case when A.NULLABLE = 'Y' then 1 else 0 end) HAS_NULLABLE,
		case when COUNT(DISTINCT B.COLUMN_NAME) = 1
			and COUNT(DISTINCT B.COLUMN_NAME) = 1 then 1 else 0 end HAS_SIMPLE_UNIQUE,
		MAX(B.U_CONSTRAINT_NAME) U_CONSTRAINT_NAME
	FROM VDATA_BROWSER_DISPLAY_COLS A
	, MVDATA_BROWSER_U_REFS B 
	WHERE A.TABLE_NAME = B.TABLE_NAME (+) AND A.COLUMN_NAME = B.COLUMN_NAME (+) AND A.TABLE_OWNER = B.TABLE_OWNER (+)
	AND COL_RANK < 5
	GROUP BY A.VIEW_NAME
), TABLES_FC_REFS AS (
    SELECT DISTINCT VIEW_NAME, FIRST_VALUE (FOREIGN_KEY_COLS) OVER (PARTITION BY VIEW_NAME ORDER BY FK_COLUMN_ID) CONTAINER_ID
	FROM MVDATA_BROWSER_FKEYS
    WHERE VIEW_NAME != R_VIEW_NAME 
	and FK_NULLABLE = 'N' 
	and DELETE_RULE = 'CASCADE'
), TABLES_FP_REFS AS (
    SELECT DISTINCT VIEW_NAME, FIRST_VALUE (FOREIGN_KEY_COLS) OVER (PARTITION BY VIEW_NAME ORDER BY FK_COLUMN_ID) FOLDER_PARENT_ID
	FROM MVDATA_BROWSER_FKEYS
    WHERE VIEW_NAME = R_VIEW_NAME 
	and FK_NULLABLE = 'Y' 
	and DELETE_RULE = 'CASCADE'
)
SELECT T.VIEW_NAME, T.VIEW_OWNER, T.TABLE_NAME, T.TABLE_OWNER, T.SHORT_NAME,
	HAS_SCALAR_PRIMARY_KEY, PRIMARY_KEY_COLS, SEARCH_KEY_COLS,
	HAS_SCALAR_KEY, SCALAR_KEY_COLUMN, SEQUENCE_OWNER, SEQUENCE_NAME, 
	CONSTRAINT_NAME, IS_ADMIN_TABLE, IS_REFERENCED_KEY, REFERENCES_COUNT,
	CAST(UNIQUE_COLUMN_NAMES AS VARCHAR2(128)) UNIQUE_COLUMN_NAMES,
	CAST(MATCHING_COLUMN_NAMES AS VARCHAR2(128)) MATCHING_COLUMN_NAMES,
	CAST(CHAR_COLUMN_NAMES AS VARCHAR2(128)) CHAR_COLUMN_NAMES,
	CAST(DISPLAYED_COLUMN_NAMES AS VARCHAR2(128)) DISPLAYED_COLUMN_NAMES,
	ACTIVE_LOV_COLUMN_NAME,
	case when T.ACTIVE_LOV_COLUMN_NAME IS NOT NULL then 
		cast(data_browser_conf.Get_Yes_No_Column_Type (
			p_Table_Name => T.TABLE_NAME,
			p_Table_Owner => T.TABLE_OWNER,
			p_Column_Name => T.ACTIVE_LOV_COLUMN_NAME
		) as VARCHAR2(20))
	end ACTIVE_LOV_DATA_TYPE,
	CAST(HTML_FIELD_COLUMN_NAME AS VARCHAR2(128)) HTML_FIELD_COLUMN_NAME, 
	CAST(FILE_FOLDER_COLUMN_NAME AS VARCHAR2(128)) FILE_FOLDER_COLUMN_NAME, 
	CAST(FILE_CONTENT_COLUMN_NAME AS VARCHAR2(128)) FILE_CONTENT_COLUMN_NAME, 
	CAST(FOLDER_PARENT_COLUMN_NAME AS VARCHAR2(128)) FOLDER_PARENT_COLUMN_NAME, 
	CAST(FOLDER_CONTAINER_COLUMN_NAME AS VARCHAR2(128)) FOLDER_CONTAINER_COLUMN_NAME, 
	CAST(FOLDER_NAME_COLUMN_NAME AS VARCHAR2(128)) FOLDER_NAME_COLUMN_NAME,		
	CAST(ORDERING_COLUMN_NAME AS VARCHAR2(128)) ORDERING_COLUMN_NAME,
	CAST(CALEND_START_DATE_COLUMN_NAME AS VARCHAR2(128)) CALEND_START_DATE_COLUMN_NAME,
	CAST(CALENDAR_END_DATE_COLUMN_NAME AS VARCHAR2(128)) CALENDAR_END_DATE_COLUMN_NAME,
	CAST(SUMMAND_COLUMN_NAME AS VARCHAR2(128)) SUMMAND_COLUMN_NAME,
	CAST(MINUEND_COLUMN_NAME AS VARCHAR2(128)) MINUEND_COLUMN_NAME,
	CAST(FACTORS_COLUMN_NAME AS VARCHAR2(128)) FACTORS_COLUMN_NAME,
	KEY_COLS_COUNT, COLUMN_CNT, COLUMN_PREFIX, HAS_NULLABLE, HAS_SIMPLE_UNIQUE, U_CONSTRAINT_NAME, 
	NUM_ROWS, READ_ONLY,
	CAST(COMMENTS AS VARCHAR2(300)) COMMENTS
FROM (
	SELECT T.VIEW_NAME, T.VIEW_OWNER, T.TABLE_NAME, T.TABLE_OWNER, T.SHORT_NAME,
		T.HAS_SCALAR_PRIMARY_KEY, 
		T.PRIMARY_KEY_COLS, T.SEARCH_KEY_COLS, T.HAS_SCALAR_KEY, T.SCALAR_KEY_COLUMN, 
		T.SEQUENCE_OWNER, T.SEQUENCE_NAME, T.CONSTRAINT_NAME,
		T.IS_ADMIN_TABLE, T.IS_REFERENCED_KEY, T.REFERENCES_COUNT, U.UNIQUE_COLUMN_NAMES, D.MATCHING_COLUMN_NAMES, C.CHAR_COLUMN_NAMES,
		case when NVL(D.U_CONSTRAINT_NAME,'-') != U.U_CONSTRAINT_NAME
			and U.UNIQUE_COLUMN_NAMES IS NOT NULL and D.MATCHING_COLUMN_NAMES IS NOT NULL
			and INSTR(D.MATCHING_COLUMN_NAMES, U.UNIQUE_COLUMN_NAMES) = 0
		then
			data_browser_conf.Concat_List(U.UNIQUE_COLUMN_NAMES, D.MATCHING_COLUMN_NAMES)
		else
			COALESCE(U.UNIQUE_COLUMN_NAMES, D.MATCHING_COLUMN_NAMES, C.CHAR_COLUMN_NAMES, T.PRIMARY_KEY_COLS)
		end DISPLAYED_COLUMN_NAMES,
		RV.ACTIVE_LOV_COLUMN_NAME,
		NVL(RV.FOLDER_PARENT_COLUMN_NAME, FP.FOLDER_PARENT_ID) FOLDER_PARENT_COLUMN_NAME, 
		FC.CONTAINER_ID FOLDER_CONTAINER_COLUMN_NAME, 
		RV.HTML_FIELD_COLUMN_NAME, 
		RV.FILE_FOLDER_COLUMN_NAME, 
		RV.FILE_CONTENT_COLUMN_NAME,
		RV.FOLDER_NAME_COLUMN_NAME,
		RV.ORDERING_COLUMN_NAME, 
		RV.CALEND_START_DATE_COLUMN_NAME, 
		RV.CALENDAR_END_DATE_COLUMN_NAME,
		RV.SUMMAND_COLUMN_NAME,
		RV.MINUEND_COLUMN_NAME,
		RV.FACTORS_COLUMN_NAME,
		T.KEY_COLS_COUNT,
		COALESCE(U.COLUMN_CNT, D.COLUMN_CNT, C.COLUMN_CNT, T.KEY_COLS_COUNT) COLUMN_CNT,
		RV.COLUMN_PREFIX,
		COALESCE(U.HAS_NULLABLE, D.HAS_NULLABLE, C.HAS_NULLABLE,
			case when T.IS_CANDIDATE_KEY = 'NO' then 1 else 0 end) HAS_NULLABLE,
		COALESCE(U.HAS_SIMPLE_UNIQUE, D.HAS_SIMPLE_UNIQUE, C.HAS_SIMPLE_UNIQUE,
			case when T.IS_CANDIDATE_KEY = 'YES' and T.KEY_COLS_COUNT = 1 then 1 else 0 end) HAS_SIMPLE_UNIQUE,
		COALESCE(U.U_CONSTRAINT_NAME, D.U_CONSTRAINT_NAME, C.U_CONSTRAINT_NAME, T.CONSTRAINT_NAME) U_CONSTRAINT_NAME,
		A.NUM_ROWS, T.READ_ONLY,
		SUBSTR(TC.COMMENTS, 1, 300) COMMENTS
	FROM MVDATA_BROWSER_VIEWS T
	, TABLE( data_browser_pipes.FN_Pipe_Table_Numrows) A 
	, TABLE (data_browser_pipes.FN_Pipe_Special_Columns ) RV 
	, TABLES_U_REFS U 
	, TABLES_D_REFS D 
	, TABLES_C_REFS C 
	, TABLES_FC_REFS FC
	, TABLES_FP_REFS FP
	, SYS.ALL_TAB_COMMENTS TC 
	WHERE A.TABLE_NAME = T.TABLE_NAME AND A.OWNER = T.TABLE_OWNER
	AND T.TABLE_NAME = RV.TABLE_NAME AND T.TABLE_OWNER = RV.TABLE_OWNER
	AND T.VIEW_NAME = U.VIEW_NAME (+) -- unique key description for each table
	AND T.VIEW_NAME = D.VIEW_NAME (+) -- pattern matching description for each table
	AND T.VIEW_NAME = C.VIEW_NAME (+) -- character type fields description for each table
	AND T.VIEW_NAME = FC.VIEW_NAME (+) -- special foreign keys
	AND T.VIEW_NAME = FP.VIEW_NAME (+) -- special foreign keys
	AND T.TABLE_NAME = TC.TABLE_NAME (+) AND T.TABLE_OWNER = TC.OWNER (+)
) T;

ALTER TABLE MVDATA_BROWSER_DESCRIPTIONS ADD
 CONSTRAINT MUSER_TABLES_DESCRIPTION_PK PRIMARY KEY (VIEW_NAME) USING INDEX;




-- foreign keys with description columns
-- DROP MATERIALIZED VIEW MVDATA_BROWSER_F_REFS;
CREATE MATERIALIZED VIEW MVDATA_BROWSER_F_REFS (
	VIEW_NAME, TABLE_NAME, IMP_COLUMN_NAME, COLUMN_PREFIX, IS_UPPER_NAME, COLUMN_HEADER, WARNING_MSG,
	PRIMARY_KEY_COLS, SEARCH_KEY_COLS, SHORT_NAME, FOREIGN_KEY_COLS, NORM_COLUMN_NAME, 
	FK_COLUMN_ID, R_PRIMARY_KEY_COLS, R_CONSTRAINT_TYPE,
	R_VIEW_NAME, R_TABLE_NAME, COLUMN_ID, NULLABLE, R_COLUMN_ID, POSITION, R_POSITION, 
	R_COLUMN_NAME, R_NULLABLE, R_DATA_TYPE, R_DATA_PRECISION, R_DATA_SCALE, R_DATA_DEFAULT, R_CHAR_LENGTH, 
	COLUMN_ALIGN, FIELD_LENGTH, TABLE_ALIAS, HAS_HELP_TEXT, HAS_DEFAULT, IS_BLOB, IS_PASSWORD, IS_AUDIT_COLUMN,
	IS_READONLY, IS_HIDDEN, DISPLAY_IN_REPORT, IS_DISPLAYED_KEY_COLUMN, IS_REFERENCE, IS_FILE_FOLDER_REF,
	HAS_NULLABLE, U_CONSTRAINT_NAME, U_MEMBERS, U_MATCHING
)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS	-- for views of user tables
WITH TABLES_D_REFS AS (
	SELECT VIEW_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_ID, POSITION,
			NULLABLE, DATA_TYPE, DATA_PRECISION, DATA_SCALE, CHAR_LENGTH, DEFAULT_LENGTH, VIRTUAL_COLUMN, 
			HAS_NULLABLE, U_CONSTRAINT_NAME,
			U_MEMBERS, U_MATCHING,
			DENSE_RANK() OVER (PARTITION BY VIEW_NAME ORDER BY RANK) RANK
	FROM (
		SELECT VIEW_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_ID, POSITION,
			NULLABLE, DATA_TYPE, DATA_PRECISION, DATA_SCALE, CHAR_LENGTH, DEFAULT_LENGTH, VIRTUAL_COLUMN, 
			HAS_NULLABLE, U_CONSTRAINT_NAME,
			U_MEMBERS, MATCHING U_MATCHING, 1 RANK
		FROM MVDATA_BROWSER_U_REFS C
		WHERE RANK = 1
		UNION ALL
		SELECT VIEW_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_ID,  POSITION,
			NULLABLE, DATA_TYPE, DATA_PRECISION,  DATA_SCALE, CHAR_LENGTH, DEFAULT_LENGTH, VIRTUAL_COLUMN,
			HAS_NULLABLE,  NULL U_CONSTRAINT_NAME,
			MEMBERS U_MEMBERS, MATCHING U_MATCHING, 2 RANK
		FROM MVDATA_BROWSER_D_REFS C
		UNION ALL
		SELECT VIEW_NAME, TABLE_NAME, COLUMN_NAME, COLUMN_ID, COL_RANK POSITION,
			NULLABLE, DATA_TYPE, DATA_PRECISION, DATA_SCALE, CHAR_LENGTH, DEFAULT_LENGTH, VIRTUAL_COLUMN, 
			SUM(case when C.NULLABLE = 'Y' then 1 else 0 end) OVER (PARTITION BY C.VIEW_NAME) HAS_NULLABLE,
			NULL U_CONSTRAINT_NAME,
			COUNT(DISTINCT C.COLUMN_NAME) OVER (PARTITION BY C.VIEW_NAME) U_MEMBERS,
			0 U_MATCHING, 3 RANK
		FROM VDATA_BROWSER_DISPLAY_COLS C
		WHERE COL_RANK < 5
	)
)
SELECT VIEW_NAME, TABLE_NAME,
	IMP_COLUMN_NAME
	|| case when COUNT(*) OVER (PARTITION BY TABLE_NAME, IMP_COLUMN_NAME) > 1
		then DENSE_RANK() OVER (PARTITION BY TABLE_NAME, IMP_COLUMN_NAME ORDER BY COLUMN_ID, R_COLUMN_ID) -- run_no
	end
	AS IMP_COLUMN_NAME,
	COLUMN_PREFIX, IS_UPPER_NAME,
	CAST(data_browser_conf.Column_Name_to_Header(
		p_Column_Name => COLUMN_HEADER, 
		p_Remove_Extension => 'NO', 
		p_Is_Upper_Name => IS_UPPER_NAME
	) AS VARCHAR2(128)) COLUMN_HEADER,
	WARNING_MSG,
	PRIMARY_KEY_COLS,
	SEARCH_KEY_COLS,
	SHORT_NAME, FOREIGN_KEY_COLS, NORM_COLUMN_NAME, 
	FK_COLUMN_ID, R_PRIMARY_KEY_COLS, R_CONSTRAINT_TYPE,
	R_VIEW_NAME, R_TABLE_NAME, COLUMN_ID, NULLABLE, 
	R_COLUMN_ID, POSITION, R_POSITION,
	CAST(R_COLUMN_NAME AS VARCHAR2(128)) R_COLUMN_NAME,
	R_NULLABLE, R_DATA_TYPE, R_DATA_PRECISION,
	R_DATA_SCALE, R_DATA_DEFAULT, R_CHAR_LENGTH, 
	case when IS_ORDERING_COLUMN = 'Y' then 'CENTER'
		when R_DATA_TYPE IN ('NUMBER', 'FLOAT') then 'RIGHT'
		when R_DATA_TYPE IN ('BLOB', 'ORDIMAGE') then 'CENTER'
		else 'LEFT'
	end COLUMN_ALIGN,
	data_browser_conf.Get_Field_Length(
		p_Column_Name => R_COLUMN_NAME,
		p_Data_Type => R_DATA_TYPE,
		p_Data_Precision => R_DATA_PRECISION,
		p_Data_Scale => R_DATA_SCALE,
		p_Char_Length => R_CHAR_LENGTH,
		p_Use_Group_Separator => 'Y'
	) FIELD_LENGTH,
	CAST(TABLE_ALIAS AS VARCHAR2(10)) TABLE_ALIAS,
	HAS_HELP_TEXT, HAS_DEFAULT, IS_BLOB, IS_PASSWORD, IS_AUDIT_COLUMN, IS_READONLY, IS_HIDDEN, 
	case when IS_DISPLAYED_KEY_COLUMN = 'Y' 
		then 'Y'
	when (IS_HIDDEN = 'Y' OR IS_PASSWORD = 'Y' OR IS_AUDIT_COLUMN = 'Y') 
		then 'N' else 'Y'
	end DISPLAY_IN_REPORT,
	IS_DISPLAYED_KEY_COLUMN, IS_REFERENCE, IS_FILE_FOLDER_REF,
	HAS_NULLABLE, U_CONSTRAINT_NAME, U_MEMBERS, U_MATCHING
FROM (
	SELECT F.VIEW_NAME, F.TABLE_NAME, SD.PRIMARY_KEY_COLS, SD.SEARCH_KEY_COLS, SD.SHORT_NAME,
        F.FOREIGN_KEY_COLS, F.NORM_COLUMN_NAME, 
        F.FK_COLUMN_ID, F.R_PRIMARY_KEY_COLS, F.R_CONSTRAINT_TYPE,
        F.R_VIEW_NAME, F.R_TABLE_NAME,
        T.COLUMN_ID, T.NULLABLE,
        case when C.COLUMN_ID IS NULL then 'No description columns found. (F)' end WARNING_MSG,
        NVL(C.COLUMN_ID, 1)*10000 R_COLUMN_ID,
		NVL(C.COLUMN_ID, 1)*10000+NVL(C.POSITION, 1)*100 POSITION,
        NVL(C.POSITION, 1) R_POSITION,
        C.COLUMN_NAME R_COLUMN_NAME, -- NVL(C.COLUMN_NAME, F.R_PRIMARY_KEY_COLS) -- description column reserve, use pk column
        NVL(C.NULLABLE, T.NULLABLE) R_NULLABLE,
		NVL(C.DATA_TYPE, T.DATA_TYPE) R_DATA_TYPE,
		NVL(C.DATA_PRECISION, T.DATA_PRECISION) R_DATA_PRECISION,
		NVL(C.DATA_SCALE, T.DATA_SCALE) R_DATA_SCALE,
		T.DATA_DEFAULT R_DATA_DEFAULT, 
		NVL(C.CHAR_LENGTH, T.CHAR_LENGTH) R_CHAR_LENGTH,
		data_browser_conf.Sequence_To_Table_Alias(DENSE_RANK() OVER (PARTITION BY F.VIEW_NAME ORDER BY T.COLUMN_ID)) TABLE_ALIAS,
		CAST(data_browser_conf.Compose_Column_Name(
			p_First_Name => F.NORM_COLUMN_NAME
			, p_Second_Name => C.COLUMN_NAME
			, p_Deduplication => 'NO', p_Max_Length => 29
			) AS VARCHAR2(32))
		AS IMP_COLUMN_NAME,
		SD.COLUMN_PREFIX,
		CAST(case when C.COLUMN_NAME IS NOT NULL then
				data_browser_conf.Compose_Column_Name(
					NVL(data_browser_conf.Normalize_Column_Name(
							p_Column_Name => T.COLUMN_NAME, 
							p_Remove_Prefix => SD.COLUMN_PREFIX),
						data_browser_conf.Normalize_Table_Name(p_Table_Name => F.R_VIEW_NAME))
					, C.COLUMN_NAME
					, p_Deduplication => 'YES', p_Max_Length => 128)
			else 
				data_browser_conf.Normalize_Column_Name(
					p_Column_Name => T.COLUMN_NAME ,
					p_Remove_Extension => 'NO',
					p_Remove_Prefix => SD.COLUMN_PREFIX)
			end AS VARCHAR2(128))
		AS COLUMN_HEADER,
		case when exists (
			select 1
			from SYS.USER_COL_COMMENTS CC
			where CC.TABLE_NAME = SD.TABLE_NAME
			and CC.COLUMN_NAME = T.COLUMN_NAME
			and CC.COMMENTS IS NOT NULL
		) then 'Y' else 'N'
		end HAS_HELP_TEXT,
		case when C.DEFAULT_LENGTH > 0
			then 'Y' else 'N'
		end HAS_DEFAULT,
		case when (C.DATA_TYPE IN ('BLOB', 'CLOB', 'LONG', 'ORDIMAGE')
						OR T.DATA_TYPE_OWNER IS NOT NULL)
			then 'Y' else 'N'
		end IS_BLOB,
		case when (
				data_browser_pattern.Match_Password_Columns(C.COLUMN_NAME) = 'YES'
				AND  T.DATA_TYPE IN ('CHAR', 'VARCHAR', 'VARCHAR2')
			)
			or (
				data_browser_pattern.Match_Encrypted_Columns(C.COLUMN_NAME) = 'YES'
				AND  T.DATA_TYPE IN ('CHAR', 'VARCHAR', 'VARCHAR2')
			) 
			then 'Y' else 'N'
		end IS_PASSWORD,
		case when data_browser_pattern.Match_Audit_Columns(C.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_AUDIT_COLUMN,
		case when data_browser_pattern.Match_ReadOnly_Columns(C.COLUMN_NAME) = 'YES'
			or C.VIRTUAL_COLUMN = 'YES'
			then 'Y' else 'N'
		end IS_READONLY,
		case when data_browser_pattern.Match_Hidden_Columns(C.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_HIDDEN,
		case when data_browser_pattern.Match_Upper_Names_Columns(C.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_UPPER_NAME, 
		case when EXISTS (
				SELECT 'X'
				FROM TABLE( data_browser_conf.in_list(SD.DISPLAYED_COLUMN_NAMES, ',') ) P
				WHERE P.COLUMN_VALUE = T.COLUMN_NAME
			)  then 'Y' else 'N'
		end IS_DISPLAYED_KEY_COLUMN,
		C.HAS_NULLABLE, C.U_CONSTRAINT_NAME, C.U_MEMBERS, C.U_MATCHING,
		case when C.COLUMN_NAME = D.ORDERING_COLUMN_NAME then 'Y' else 'N' end IS_ORDERING_COLUMN,
		case when E.FOREIGN_KEY_COLS IS NOT NULL then 
			case when T.NULLABLE = 'N' and E.DELETE_RULE = 'CASCADE' 
				then 'C' 	-- Container 
				else 'Y' 	-- Yes
			end
		else 'N' 			-- No
		end IS_REFERENCE,
        case when (SD.FILE_FOLDER_COLUMN_NAME = F.FOREIGN_KEY_COLS and C.COLUMN_NAME IN (D.FOLDER_NAME_COLUMN_NAME,D.FOLDER_PARENT_COLUMN_NAME))
        or (SD.FOLDER_PARENT_COLUMN_NAME = F.FOREIGN_KEY_COLS )
        	then 'Y' else 'N' 
        end IS_FILE_FOLDER_REF
	FROM MVDATA_BROWSER_DESCRIPTIONS SD
	, MVDATA_BROWSER_FKEYS F
	, MVDATA_BROWSER_FKEYS E 
	, TABLE (data_browser_pipes.FN_Pipe_Table_Columns) T 
	, MVDATA_BROWSER_DESCRIPTIONS D
	, TABLES_D_REFS C 
	WHERE SD.VIEW_NAME = F.VIEW_NAME AND SD.TABLE_OWNER = F.OWNER  -- only use foreign keys with single column
	AND SD.VIEW_NAME = T.TABLE_NAME  AND T.TABLE_OWNER = SD.VIEW_OWNER -- only columns that appear in the view
	AND F.FK_COLUMN_ID = T.COLUMN_ID -- support for composite keys
	AND T.HIDDEN_COLUMN = 'NO'
	AND D.VIEW_NAME = F.R_VIEW_NAME AND D.VIEW_OWNER = SD.VIEW_OWNER
	AND F.R_VIEW_NAME = C.VIEW_NAME (+) AND C.RANK (+) = 1 -- description for each foreign key
	AND F.R_VIEW_NAME = E.VIEW_NAME (+) AND C.COLUMN_NAME = E.FOREIGN_KEY_COLS (+)
);

ALTER TABLE MVDATA_BROWSER_F_REFS ADD
  CONSTRAINT MVDATA_BROWSER_TAB_F_REFS_PK PRIMARY KEY (VIEW_NAME, FOREIGN_KEY_COLS, IMP_COLUMN_NAME) USING INDEX COMPRESS 1;

CREATE INDEX MVDATA_BROWSER_F_REFS_IND ON MVDATA_BROWSER_F_REFS(R_VIEW_NAME, R_COLUMN_NAME);

COMMENT ON MATERIALIZED VIEW MVDATA_BROWSER_F_REFS IS
'List of displayed column names for each user table foreign key. The columns names match a pattern in the list of Reference Description Cols configuration list.';


CREATE MATERIALIZED VIEW MVDATA_BROWSER_CHECKS_DEFS (
	TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME, CHECK_CONSTRAINT_NAME, CHECK_CONDITION,
	CONS_COLS_COUNT, IS_FOREIGN_KEY, IS_REFERENCE, CHECK_UNIQUE, CONSTRAINT_NAME, REQUIRED, DATA_DEFAULT,
	IS_SIMPLE_IN_LIST, STATIC_LOV_EXPR
)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
WITH CHECK_CONSTRAINTS_Q AS (
	SELECT DISTINCT TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME, POSITION, CONSTRAINT_NAME CHECK_CONSTRAINT_NAME, SEARCH_CONDITION, CONS_COLS_COUNT, CONS_COUNT
	FROM (
			SELECT /*+ USE_MERGE(B T) */
				TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME, POSITION, CONSTRAINT_NAME, SEARCH_CONDITION,
			COUNT(DISTINCT COLUMN_NAME) OVER (PARTITION BY TABLE_NAME, CONSTRAINT_NAME) CONS_COLS_COUNT,
			COUNT(DISTINCT SEARCH_CONDITION) OVER (PARTITION BY TABLE_NAME, COLUMN_NAME) CONS_COUNT
		FROM (
            SELECT B.OWNER TABLE_OWNER, B.TABLE_NAME, T.VIEW_NAME, B.COLUMN_NAME, B.POSITION, B.CONSTRAINT_NAME, B.SEARCH_CONDITION
			FROM TABLE ( data_browser_conf.Constraint_Columns_Cursor ) B 
			, MVDATA_BROWSER_VIEWS T 
			WHERE T.TABLE_NAME = B.TABLE_NAME AND T.TABLE_OWNER = B.OWNER
		) A
	)
),
TABLE_UNIQUE_CONS_Q AS (
	SELECT U.TABLE_OWNER, U.TABLE_NAME, T.VIEW_NAME, 
		U.VIEW_KEY_COLS COLUMN_NAME, 
		U.CONSTRAINT_NAME, 
		'Y' CHECK_UNIQUE, 
        U.REQUIRED, 
		U.VIEW_KEY_COLS_COUNT CONS_COLS_COUNT
	FROM MVBASE_UNIQUE_KEYS U 
    , MVDATA_BROWSER_VIEWS T 
    WHERE T.TABLE_NAME = U.TABLE_NAME AND T.TABLE_OWNER = U.TABLE_OWNER
),
AUTO_UNIQUE_Q AS (
	SELECT TABLE_OWNER, TABLE_NAME, VIEW_NAME, 
		DISPLAYED_COLUMN_NAMES COLUMN_NAME,
		'AUTOMATICALLY' CONSTRAINT_NAME,
		'Y' CHECK_UNIQUE,
		case when HAS_NULLABLE > 0 then 'N' else 'Y' end REQUIRED,
		COLUMN_CNT CONS_COLS_COUNT
	FROM MVDATA_BROWSER_DESCRIPTIONS DC
	WHERE DC.UNIQUE_COLUMN_NAMES IS NULL
),
UNIQUE_CONSTRAINTS_Q AS (
	SELECT TABLE_OWNER, TABLE_NAME, VIEW_NAME,COLUMN_NAME, CONSTRAINT_NAME, CHECK_UNIQUE, REQUIRED, CONS_COLS_COUNT
	FROM TABLE_UNIQUE_CONS_Q
	UNION ALL 
	SELECT TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME, CONSTRAINT_NAME, CHECK_UNIQUE, REQUIRED, CONS_COLS_COUNT
	FROM AUTO_UNIQUE_Q A
	WHERE NOT EXISTS (
		SELECT 1
		FROM TABLE_UNIQUE_CONS_Q U 
		WHERE U.VIEW_NAME = A.VIEW_NAME
		AND U.COLUMN_NAME = A.COLUMN_NAME
	)
),
AUTO_CONSTRAINTS_Q AS ( -- produce range checks from NUMBER and DATE and TIMESTAMP
	SELECT /* USE_MERGE(T C F) */
		T.TABLE_OWNER, T.TABLE_NAME, T.VIEW_NAME, C.COLUMN_NAME, 
		C.DATA_DEFAULT, -- the data_default of virtual columns contains the projection expression
		'AUTOMATICALLY' CHECK_CONSTRAINT_NAME,
		case when C.DATA_TYPE IN ('NUMBER', 'FLOAT') then
				C.COLUMN_NAME
				|| ' > ' 
				|| TO_CHAR(-POWER(10, NVL(C.DATA_PRECISION, Default_Data_Precision + Default_Data_Scale) - NVL(C.DATA_SCALE, Default_Data_Scale)), 'TM9') 
				|| ' AND ' || C.COLUMN_NAME || ' < ' 
				|| TO_CHAR(POWER(10, NVL(C.DATA_PRECISION, Default_Data_Precision + Default_Data_Scale) - NVL(C.DATA_SCALE, Default_Data_Scale)), 'TM9')
			when C.DATA_TYPE = 'DATE' then
				C.COLUMN_NAME || ' BETWEEN DATE ''0001-01-01'' AND DATE ''9999-12-31'' '
			when C.DATA_TYPE LIKE 'TIMESTAMP%' then
				C.COLUMN_NAME || ' BETWEEN TIMESTAMP ''0001-01-01 00:00:00.0'' AND TIMESTAMP ''9999-12-31 23:59:59.9'' '
			when C.CHAR_LENGTH > 0 then 
				'LENGTH(' || C.COLUMN_NAME || ') <= ' || C.CHAR_LENGTH
		end CHECK_CONDITION,
		1 CONS_COLS_COUNT,
		case when C.NULLABLE = 'N' then 'Y' end REQUIRED,
		case when F.FK_COLUMN_ID IS NOT NULL then 
				case when C.NULLABLE = 'N' and F.DELETE_RULE = 'CASCADE' 
					then 'C' 	-- Container 
					else 'Y' 	-- Yes
					end
			else 'N' 			-- No
		end IS_REFERENCE,
		case when F.FK_COLUMN_ID IS NOT NULL then 'Y' ELSE 'N' end IS_FOREIGN_KEY -- no range check for foreign key columns
	FROM MVDATA_BROWSER_VIEWS T
	, TABLE (data_browser_pipes.FN_Pipe_Table_Columns) C
	, MVDATA_BROWSER_FKEYS F 
	, (SELECT 38 Default_Data_Precision, 16 Default_Data_Scale FROM DUAL) PAR
	WHERE T.TABLE_NAME = C.TABLE_NAME AND T.TABLE_OWNER = C.TABLE_OWNER
	AND C.COLUMN_NAME != T.SEARCH_KEY_COLS
	AND C.HIDDEN_COLUMN = 'NO'
	AND (C.DEFAULT_LENGTH > 0
		OR C.NULLABLE = 'N'
		OR C.DATA_TYPE = 'NUMBER'
		OR C.DATA_TYPE = 'FLOAT'
		OR C.DATA_TYPE = 'DATE'
		OR C.DATA_TYPE LIKE 'TIMESTAMP%'
		OR C.CHAR_LENGTH > 0
	)
	AND T.VIEW_NAME = F.VIEW_NAME (+)
	AND T.TABLE_OWNER = F.OWNER (+)
	AND C.COLUMN_NAME = F.FOREIGN_KEY_COLS (+)  -- rethink the case when multiple foreign keys exist!!
	AND C.COLUMN_ID = F.FK_COLUMN_ID (+)		-- support for composite keys
)
SELECT
	TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME, CHECK_CONSTRAINT_NAME,
	CAST(CHECK_CONDITION AS VARCHAR2(4000)) CHECK_CONDITION,
	CONS_COLS_COUNT, IS_FOREIGN_KEY, IS_REFERENCE,
	CHECK_UNIQUE, CONSTRAINT_NAME, 
	REQUIRED, DATA_DEFAULT,
	IS_SIMPLE_IN_LIST,
	case when IS_SIMPLE_IN_LIST = 'Y'
		then data_browser_conf.Get_Static_LOV_Expr(CHECK_CONDITION, COLUMN_NAME)
	end STATIC_LOV_EXPR
FROM (
	SELECT S.TABLE_OWNER, S.TABLE_NAME, S.VIEW_NAME, S.COLUMN_NAME, 
		S.CHECK_CONSTRAINT_NAME,
		S.CHECK_CONDITION,
		S.CONS_COLS_COUNT, S.IS_FOREIGN_KEY, S.IS_REFERENCE,
		S.CHECK_UNIQUE,
		NVL(S.UNIQUE_CONSTRAINT_NAME, S.CHECK_CONSTRAINT_NAME) CONSTRAINT_NAME,
		S.REQUIRED,
		S.DATA_DEFAULT,
		CAST(data_browser_conf.Is_Simple_IN_List(S.CHECK_CONDITION, S.COLUMN_NAME) AS VARCHAR2(10)) IS_SIMPLE_IN_LIST
	FROM (
		SELECT NVL(A.TABLE_OWNER, C.TABLE_OWNER) TABLE_OWNER,
            NVL(A.TABLE_NAME, C.TABLE_NAME) TABLE_NAME,
			NVL(A.VIEW_NAME, C.VIEW_NAME) VIEW_NAME,
			CAST(NVL(A.COLUMN_NAME, C.COLUMN_NAME) AS VARCHAR2(1024)) COLUMN_NAME,
			NVL(A.CHECK_CONSTRAINT_NAME, C.CHECK_CONSTRAINT_NAME) CHECK_CONSTRAINT_NAME,
			NVL(A.CHECK_CONDITION, C.CHECK_CONDITION) CHECK_CONDITION,
			NVL(A.CONS_COLS_COUNT, C.CONS_COLS_COUNT) CONS_COLS_COUNT,
			NVL(C.IS_FOREIGN_KEY, 'N') IS_FOREIGN_KEY,
			NVL(C.IS_REFERENCE, 'N') IS_REFERENCE,
			A.CHECK_UNIQUE,
			A.UNIQUE_CONSTRAINT_NAME,
			COALESCE(A.REQUIRED, C.REQUIRED, 'N') REQUIRED,
			C.DATA_DEFAULT
		FROM (
			SELECT NVL(A.TABLE_OWNER, C.TABLE_OWNER) TABLE_OWNER,
                NVL(A.TABLE_NAME, C.TABLE_NAME) TABLE_NAME,
				NVL(A.VIEW_NAME, C.VIEW_NAME) VIEW_NAME,
				CAST(NVL(A.COLUMN_NAME, C.COLUMN_NAME) AS VARCHAR2(1024)) COLUMN_NAME,
				A.CHECK_CONSTRAINT_NAME, 
				A.CHECK_CONDITION,
				NVL(A.CONS_COLS_COUNT, C.CONS_COLS_COUNT) CONS_COLS_COUNT,
				NVL(C.CHECK_UNIQUE, 'N') CHECK_UNIQUE,
				C.CONSTRAINT_NAME UNIQUE_CONSTRAINT_NAME,
				C.REQUIRED -- for primary key
			FROM (
				SELECT TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME,
					MAX(CHECK_CONSTRAINT_NAME) CHECK_CONSTRAINT_NAME,
					LISTAGG(CASE WHEN CONS_COUNT > 1 THEN '('||SEARCH_CONDITION||')' ELSE SEARCH_CONDITION END
						, ' AND ') WITHIN GROUP (ORDER BY CHECK_CONSTRAINT_NAME) CHECK_CONDITION,
					1 CONS_COLS_COUNT
				FROM CHECK_CONSTRAINTS_Q
				WHERE CONS_COLS_COUNT = 1 -- simple constraint references only one column_name
				GROUP BY TABLE_OWNER, TABLE_NAME, VIEW_NAME, COLUMN_NAME
				UNION ALL
				SELECT TABLE_OWNER, TABLE_NAME, VIEW_NAME,
					LISTAGG(COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY CHECK_CONSTRAINT_NAME, POSITION) COLUMN_NAME,
					CHECK_CONSTRAINT_NAME,
					MAX(SEARCH_CONDITION) CHECK_CONDITION,
					MAX(CONS_COLS_COUNT) CONS_COLS_COUNT
				FROM CHECK_CONSTRAINTS_Q
				WHERE CONS_COLS_COUNT > 1 -- composite constraint references with multiple column_name
				GROUP BY TABLE_OWNER, TABLE_NAME, VIEW_NAME, CHECK_CONSTRAINT_NAME
			) A
			FULL OUTER JOIN UNIQUE_CONSTRAINTS_Q C ON A.TABLE_NAME = C.TABLE_NAME AND A.TABLE_OWNER = C.TABLE_OWNER AND A.COLUMN_NAME = C.COLUMN_NAME
		) A
		FULL OUTER JOIN AUTO_CONSTRAINTS_Q C ON A.TABLE_NAME = C.TABLE_NAME AND A.TABLE_OWNER = C.TABLE_OWNER AND A.COLUMN_NAME = C.COLUMN_NAME
	) S
	WHERE S.COLUMN_NAME IS NOT NULL
);

ALTER TABLE MVDATA_BROWSER_CHECKS_DEFS ADD CONSTRAINT MVDATA_BROWSER_TAB_CHK_DEFS_PK PRIMARY KEY (TABLE_NAME, TABLE_OWNER, COLUMN_NAME);
CREATE INDEX MVDATA_BROWSER_CHECKS_DEFS_IND ON MVDATA_BROWSER_CHECKS_DEFS (VIEW_NAME, COLUMN_NAME, CONS_COLS_COUNT);

CREATE OR REPLACE VIEW VUSER_TABLES_CHECK_IN_LIST (TABLE_NAME, TABLE_OWNER, COLUMN_NAME, DISPLAY_VALUE, COLUMN_VALUE, DISP_SEQUENCE)
AS -- format display_value
SELECT TABLE_NAME, TABLE_OWNER, COLUMN_NAME,
    data_browser_conf.LOV_Initcap(COLUMN_VALUE) DISPLAY_VALUE,
    COLUMN_VALUE,
    ROW_NUMBER() OVER (PARTITION BY TABLE_NAME, COLUMN_NAME ORDER BY RN) DISP_SEQUENCE
FROM ( -- remove quotes
   SELECT TABLE_NAME, TABLE_OWNER, COLUMN_NAME, REGEXP_REPLACE(COLUMN_VALUE, '^''(.*)''$', '\1') COLUMN_VALUE,
    ROWNUM RN
    FROM ( -- convert values to rows
        SELECT TABLE_NAME, TABLE_OWNER, COLUMN_NAME, REGEXP_REPLACE(SEARCH_CONDITION_VC, COLUMN_NAME || '\s+IN\s*\((.+)\)\s*$', '\1', 1, 1, 'i') CHECK_IN_LIST
        FROM (
			SELECT B.TABLE_NAME, B.OWNER TABLE_OWNER, B.COLUMN_NAME, B.SEARCH_CONDITION SEARCH_CONDITION_VC
			FROM TABLE ( data_browser_conf.Constraint_Columns_Cursor ) B 
		)
		WHERE REGEXP_INSTR(SEARCH_CONDITION_VC, COLUMN_NAME || '\s+IN\s*\(.+\)\s*$', 1, 1, 1, 'i') > 0
    ) S,
    TABLE( data_browser_conf.in_list(S.CHECK_IN_LIST, ',') ) P
);

COMMENT ON TABLE VUSER_TABLES_CHECK_IN_LIST IS
'List of values from simple check constraint for each table column.';


CREATE MATERIALIZED VIEW MVDATA_BROWSER_SIMPLE_COLS (
	VIEW_NAME, TABLE_NAME, TABLE_OWNER,
	COLUMN_NAME, COLUMN_HEADER, NORM_COLUMN_NAME, COLUMN_ID, POSITION, COLUMN_ALIGN, FIELD_LENGTH,
	DATA_TYPE, DATA_TYPE_OWNER, DATA_PRECISION, DATA_SCALE, DATA_DEFAULT, CHAR_LENGTH, NULLABLE, CHECK_UNIQUE,
	IS_CHECKED, IS_PRIMARY_KEY, IS_SEARCH_KEY, IS_FOREIGN_KEY, IS_REFERENCE, 
	IS_BLOB, IS_PASSWORD, IS_DATETIME, IS_DATA_DEDUCTED, 
	IS_OBFUSCATED, IS_UPPER_NAME, IS_HIDDEN, DISPLAY_IN_REPORT,
	IS_READONLY, IS_VIRTUAL_COLUMN, IS_ORDERING_COLUMN, IS_AUDIT_COLUMN, IS_IGNORED,
	IS_SUMMAND, IS_MINUEND, IS_FACTOR, IS_CURRENCY,
	IS_NUMBER_YES_NO_COLUMN, IS_CHAR_YES_NO_COLUMN, YES_NO_COLUMN_TYPE,
	IS_SIMPLE_IN_LIST, STATIC_LOV_EXPR, HAS_AUTOMATIC_CHECK, HAS_RANGE_CHECK,
	IS_DISPLAYED_KEY_COLUMN, HAS_HELP_TEXT, HAS_DEFAULT, COMMENTS
)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
SELECT
	VIEW_NAME, TABLE_NAME, TABLE_OWNER,
	COLUMN_NAME, 
	CAST(data_browser_conf.Column_Name_to_Header(
		p_Column_Name => COLUMN_NAME, 
		p_Remove_Extension => case when IS_FOREIGN_KEY = 'Y' -- has LOV query
			then 'YES' else 'NO' end, 
		p_Remove_Prefix => COLUMN_PREFIX, 
		p_Is_Upper_Name => IS_UPPER_NAME
	) AS VARCHAR2(128)) COLUMN_HEADER,
	CAST(data_browser_conf.Normalize_Column_Name(
		p_Column_Name => COLUMN_NAME, 
		p_Remove_Prefix => COLUMN_PREFIX
	) AS VARCHAR2(128)) NORM_COLUMN_NAME,
	COLUMN_ID, POSITION, 
	case when (IS_FOREIGN_KEY = 'Y' or IS_NUMBER_YES_NO_COLUMN = 'Y' or IS_CHAR_YES_NO_COLUMN = 'Y') then 'LEFT'
		when IS_ORDERING_COLUMN = 'Y' then 'CENTER'
		when DATA_TYPE IN ('NUMBER', 'FLOAT') then 'RIGHT'
		when DATA_TYPE IN ('BLOB', 'ORDIMAGE') then 'CENTER'
		else 'LEFT'
	end COLUMN_ALIGN,
	data_browser_conf.Get_Field_Length(
		p_Column_Name => COLUMN_NAME,
		p_Data_Type => DATA_TYPE,
		p_Data_Precision => DATA_PRECISION,
		p_Data_Scale => DATA_SCALE,
		p_Char_Length => CHAR_LENGTH,
		p_Use_Group_Separator => 'Y',
		p_DATETIME => IS_DATETIME
	) FIELD_LENGTH,
	DATA_TYPE, DATA_TYPE_OWNER, DATA_PRECISION, DATA_SCALE, DATA_DEFAULT, CHAR_LENGTH, NULLABLE, CHECK_UNIQUE,
	IS_CHECKED, IS_PRIMARY_KEY, IS_SEARCH_KEY, IS_FOREIGN_KEY, IS_REFERENCE, 
	IS_BLOB, IS_PASSWORD, IS_DATETIME, IS_DATA_DEDUCTED, 
	IS_OBFUSCATED, IS_UPPER_NAME, IS_HIDDEN,
	case when IS_DISPLAYED_KEY_COLUMN = 'Y' 
		then 'Y'
	when (IS_HIDDEN = 'Y' 
	   OR IS_PASSWORD = 'Y' 
	   OR IS_AUDIT_COLUMN = 'Y' 
	   OR (IS_PRIMARY_KEY = 'Y' AND HAS_SCALAR_PRIMARY_KEY = 'YES')
	   OR IS_SERIAL_KEY = 'Y')
		then 'N' else 'Y'
	end DISPLAY_IN_REPORT,
	IS_READONLY, IS_VIRTUAL_COLUMN, IS_ORDERING_COLUMN, IS_AUDIT_COLUMN, IS_IGNORED,
	IS_SUMMAND, IS_MINUEND, IS_FACTOR, IS_CURRENCY,
	IS_NUMBER_YES_NO_COLUMN, IS_CHAR_YES_NO_COLUMN, YES_NO_COLUMN_TYPE,
	IS_SIMPLE_IN_LIST, STATIC_LOV_EXPR, HAS_AUTOMATIC_CHECK, HAS_RANGE_CHECK,
	IS_DISPLAYED_KEY_COLUMN, HAS_HELP_TEXT, HAS_DEFAULT, COMMENTS
FROM (
	SELECT VIEW_NAME, TABLE_NAME, TABLE_OWNER, HAS_SCALAR_PRIMARY_KEY, IS_SERIAL_KEY,
		COLUMN_NAME, COLUMN_ID, POSITION, IS_FOREIGN_KEY, IS_REFERENCE,
		DATA_TYPE, DATA_TYPE_OWNER, 
		data_browser_conf.Get_Default_Currency_Precision(DATA_PRECISION, IS_CURRENCY) DATA_PRECISION, 
		data_browser_conf.Get_Default_Currency_Scale(DATA_SCALE, IS_CURRENCY) DATA_SCALE, 
		CHAR_LENGTH, 
		NULLABLE,
		CHECK_UNIQUE,
		case when EXISTS (
				SELECT 'X'
				FROM MVDATA_BROWSER_CHECKS_DEFS D, TABLE(apex_string.split(D.COLUMN_NAME, ', ') ) P
				WHERE P.COLUMN_VALUE = T.COLUMN_NAME
				AND D.TABLE_NAME = T.TABLE_NAME
				AND D.TABLE_OWNER = T.TABLE_OWNER
				AND D.CONSTRAINT_NAME != 'AUTOMATICALLY'
			)  then 'Y' else 'N'
		end IS_CHECKED,
		case when T.COLUMN_NAME IN (
				SELECT column_value FROM table(apex_string.split(T.PRIMARY_KEY_COLS, ', '))
			)
			then 'Y' else 'N'
		end IS_PRIMARY_KEY,
		case when T.COLUMN_NAME IN (
				SELECT column_value FROM table(apex_string.split(T.SEARCH_KEY_COLS, ', '))
			)
			then 'Y' else 'N'
		end IS_SEARCH_KEY, 
		case when (T.DATA_TYPE IN ('BLOB', 'CLOB', 'LONG', 'ORDIMAGE')
						OR T.DATA_TYPE_OWNER IS NOT NULL)
			then 'Y' else 'N'
		end IS_BLOB,
		case when (
			data_browser_pattern.Match_Password_Columns(T.COLUMN_NAME) = 'YES'
			AND T.DATA_TYPE IN ('CHAR', 'VARCHAR', 'VARCHAR2')
		) 
		or (
			data_browser_pattern.Match_Encrypted_Columns(T.COLUMN_NAME) = 'YES'
			AND  T.DATA_TYPE IN ('CHAR', 'VARCHAR', 'VARCHAR2')
		) 
		then 'Y' else 'N'
		end IS_PASSWORD,
		T.IS_DATETIME,
		case when data_browser_pattern.Match_Data_Deduction_Columns(T.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_DATA_DEDUCTED,
		case when data_browser_pattern.Match_Obfuscation_Columns(T.COLUMN_NAME) = 'YES'
				AND T.DATA_TYPE IN ('CHAR', 'VARCHAR', 'VARCHAR2')
			then 'Y' else 'N'
		end IS_OBFUSCATED, 
		case when data_browser_pattern.Match_Upper_Names_Columns(T.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_UPPER_NAME, 
		case when data_browser_pattern.Match_Hidden_Columns(T.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_HIDDEN,
		case when data_browser_pattern.Match_ReadOnly_Columns(T.COLUMN_NAME) = 'YES'
			or T.VIRTUAL_COLUMN = 'YES'
			then 'Y' else 'N'
		end IS_READONLY,
		case when T.VIRTUAL_COLUMN = 'YES'
			then 'Y' else 'N'
		end IS_VIRTUAL_COLUMN,
		case when data_browser_pattern.Match_Ordering_Columns(T.COLUMN_NAME) = 'YES'
				AND T.DATA_TYPE = 'NUMBER'
			then 'Y' else 'N'
		end IS_ORDERING_COLUMN,
		case when data_browser_pattern.Match_Audit_Columns(T.COLUMN_NAME) = 'YES'
			then 'Y' else 'N'
		end IS_AUDIT_COLUMN,
		case when data_browser_pattern.Match_Ignored_Columns(T.COLUMN_NAME) = 'YES'
			and data_browser_pattern.Match_File_Created_Columns(T.COLUMN_NAME) = 'NO'
			--and (T.COLUMN_NAME != FILE_DATE_COLUMN_NAME OR FILE_DATE_COLUMN_NAME IS NULL)
			then 'Y' else 'N'
		end IS_IGNORED,
		case when data_browser_pattern.Match_Summand_Field_Columns(T.COLUMN_NAME) = 'YES'
				AND T.DATA_TYPE IN ('NUMBER', 'FLOAT')
			then 'Y' else 'N'
		end IS_SUMMAND,
		case when data_browser_pattern.Match_Minuend_Field_Columns(T.COLUMN_NAME) = 'YES'
				AND T.DATA_TYPE IN ('NUMBER', 'FLOAT')
			then 'Y' else 'N'
		end IS_MINUEND,
		case when data_browser_pattern.Match_Factors_Field_Columns(T.COLUMN_NAME) = 'YES'
				AND T.DATA_TYPE IN ('NUMBER', 'FLOAT')
			then 'Y' else 'N'
		end IS_FACTOR,
		IS_CURRENCY,
		case when YES_NO_COLUMN_TYPE = 'NUMBER'
			then 'Y' else 'N'
		end IS_NUMBER_YES_NO_COLUMN,
		case when YES_NO_COLUMN_TYPE = 'CHAR'
			then 'Y' else 'N'
		end IS_CHAR_YES_NO_COLUMN,
		----------------------
		T.YES_NO_COLUMN_TYPE,
		T.IS_SIMPLE_IN_LIST,
		case when IS_SIMPLE_IN_LIST = 'Y'
			then data_browser_conf.Get_Static_LOV_Expr(T.CHECK_CONDITION, T.COLUMN_NAME)
		end STATIC_LOV_EXPR,
		T.HAS_AUTOMATIC_CHECK,
		T.HAS_RANGE_CHECK,
		----------------------
		case when EXISTS (
				SELECT 'X'
				FROM TABLE( data_browser_conf.in_list(T.DISPLAYED_COLUMN_NAMES, ',') ) P
				WHERE P.COLUMN_VALUE = T.COLUMN_NAME
			)  then 'Y' else 'N'
		end IS_DISPLAYED_KEY_COLUMN,
		case when T.COMMENTS IS NOT NULL
			then 'Y' else 'N'
		end HAS_HELP_TEXT,
		case when DEFAULT_LENGTH > 0
			then 'Y' else 'N'
		end HAS_DEFAULT,
		DATA_DEFAULT,
		T.COMMENTS,
		COLUMN_PREFIX
	FROM (
		SELECT S.VIEW_NAME, S.TABLE_NAME, S.TABLE_OWNER, 
			S.PRIMARY_KEY_COLS, S.HAS_SCALAR_PRIMARY_KEY,
			S.SEARCH_KEY_COLS, S.HAS_SCALAR_KEY,
			S.DISPLAYED_COLUMN_NAMES,
			case when T.COLUMN_NAME = S.SCALAR_KEY_COLUMN AND S.SEQUENCE_NAME IS NOT NULL 
				then 'Y' else 'N' 
			end IS_SERIAL_KEY,
			T.COLUMN_NAME, T.COLUMN_ID, 0 POSITION,
			T.DATA_TYPE, T.DATA_TYPE_OWNER, T.DATA_PRECISION, T.DATA_SCALE, T.DATA_DEFAULT,
			T.CHAR_LENGTH, T.NULLABLE, T.DEFAULT_LENGTH, T.VIRTUAL_COLUMN,
			NVL(B.IS_FOREIGN_KEY, 'N') IS_FOREIGN_KEY,
			NVL(B.IS_REFERENCE, 'N') IS_REFERENCE,
			NVL(B.CHECK_UNIQUE, 'N') CHECK_UNIQUE,
			case when T.DATA_TYPE IN ('CHAR', 'VARCHAR', 'VARCHAR2', 'NUMBER') and B.IS_FOREIGN_KEY = 'N' then 
				data_browser_conf.Get_Yes_No_Column_Type (
					p_Table_Name => T.TABLE_NAME,
					p_Table_Owner => S.TABLE_OWNER,
					p_Column_Name => T.COLUMN_NAME,
					p_Data_Type => T.DATA_TYPE,
					p_Data_Precision => T.DATA_PRECISION,
					p_Data_Scale => T.DATA_SCALE,
					p_Char_Length => T.CHAR_LENGTH,
					p_Nullable => T.NULLABLE,
					p_Num_Distinct => T.NUM_DISTINCT,
					p_Default_Text => T.DATA_DEFAULT,
                    p_Check_Condition => B.CHECK_CONDITION
				) 
			end YES_NO_COLUMN_TYPE,
			CAST(data_browser_conf.Is_Simple_IN_List(B.CHECK_CONDITION, T.COLUMN_NAME) AS VARCHAR2(3)) IS_SIMPLE_IN_LIST,
			case when B.CHECK_CONSTRAINT_NAME = 'AUTOMATICALLY' then 'Y' else 'N' end HAS_AUTOMATIC_CHECK,
			case when B.CHECK_CONSTRAINT_NAME IS NOT NULL then 'Y' else 'N' end HAS_RANGE_CHECK,
			B.CHECK_CONDITION,
			case when T.DATA_TYPE LIKE 'TIMESTAMP%'
			or (T.DATA_TYPE = 'DATE' and data_browser_pattern.Match_DateTime_Columns(T.COLUMN_NAME) = 'YES')
				then 'Y' else 'N'
			end IS_DATETIME,
			case when data_browser_pattern.Match_Currency_Columns(T.COLUMN_NAME) = 'YES'
					AND T.DATA_TYPE IN ('NUMBER', 'FLOAT')
				then 'Y' else 'N'
			end IS_CURRENCY,
			D.COMMENTS,
			S.COLUMN_PREFIX
		FROM TABLE ( data_browser_pipes.FN_Pipe_Table_Columns ) T
		, MVDATA_BROWSER_DESCRIPTIONS S 
		, SYS.ALL_COL_COMMENTS D 
        , (
			SELECT B.TABLE_OWNER, B.TABLE_NAME, B.COLUMN_NAME, B.CHECK_CONDITION, B.CHECK_CONSTRAINT_NAME,
				B.CHECK_UNIQUE, B.IS_FOREIGN_KEY, B.IS_REFERENCE
			FROM MVDATA_BROWSER_CHECKS_DEFS B
			WHERE B.CONS_COLS_COUNT = 1 
		) B
		WHERE S.VIEW_NAME = T.TABLE_NAME AND S.TABLE_OWNER = T.TABLE_OWNER -- only columns that appear in the view
		AND T.HIDDEN_COLUMN = 'NO'
		AND T.DATA_TYPE_OWNER IS NULL 				-- complex data types are not supported
		AND S.TABLE_NAME = D.TABLE_NAME (+) AND T.COLUMN_NAME = D.COLUMN_NAME (+) AND S.TABLE_OWNER = D.OWNER (+)
		AND T.TABLE_NAME = B.TABLE_NAME (+)
		AND S.TABLE_OWNER = B.TABLE_OWNER (+)
		AND T.COLUMN_NAME = B.COLUMN_NAME (+)
	) T
);

ALTER TABLE MVDATA_BROWSER_SIMPLE_COLS ADD CONSTRAINT MVDATA_BROWS_TAB_SIMP_COLS_PK PRIMARY KEY (VIEW_NAME, COLUMN_NAME);
COMMENT ON MATERIALIZED VIEW MVDATA_BROWSER_SIMPLE_COLS IS
'Table Column definitions';

-- DROP MATERIALIZED VIEW MVDATA_BROWSER_REFERENCES;

CREATE MATERIALIZED VIEW MVDATA_BROWSER_REFERENCES (
	TABLE_NAME, VIEW_NAME, CONSTRAINT_NAME, COLUMN_NAME, 
	NUM_ROWS, DELETE_RULE, 
	FK_COLUMN_ID, FK_NULLABLE, 
	UNIQUE_KEY_COLS,
    R_TABLE_NAME, R_VIEW_NAME, R_NUM_ROWS, R_PRIMARY_KEY_COLS, R_UNIQUE_KEY_COLS, 
    R_COLUMN_NAME, R_COLUMN_NAMES, R_MEMBERS, R_IS_ADMIN_TABLE,
    U_COLUMN_NAMES, U_CONSTRAINT_NAME, U_MEMBERS, DISPLAYED_COLUMN_NAMES, ORDERING_COLUMN_NAME,
    ACTIVE_LOV_COLUMN_NAME, ACTIVE_LOV_DATA_TYPE, 
	FOLDER_NAME_COLUMN_NAME, FOLDER_PARENT_COLUMN_NAME, FOLDER_CONTAINER_COLUMN_NAME, 
    TABLE_ALIAS, FILTER_KEY_COLUMN, PARENT_KEY_COLUMN)
	CACHE
	NOLOGGING
	STORAGE (
	  INITIAL 1024
	  NEXT 1024
	  MINEXTENTS 1
	  MAXEXTENTS UNLIMITED
	  BUFFER_POOL KEEP
	)
	BUILD DEFERRED
    REFRESH COMPLETE
    ON DEMAND
AS
WITH FOREIGN_KEY_PARENTS AS (
	-- For each foreign key column of a table x a list of candidate parent keys source columns from 
	-- the same table x is calculated. Used to restrict LOV Lists
	SELECT VIEW_NAME, COLUMN_NAME, R_VIEW_NAME, CONSTRAINT_NAME, DELETE_RULE, FK_NULLABLE,	
		R_VIEW_NAME2, FILTER_KEY_COLUMN, R_CONSTRAINT_NAME2, R_DELETE_RULE2, R_NULLABLE2,	
		VIEW_NAME2, PARENT_KEY_COLUMN, PARENT_DELETE_RULE, PARENT_NULLABLE
	FROM (
		SELECT E.VIEW_NAME, E.FOREIGN_KEY_COLS COLUMN_NAME, E.R_VIEW_NAME, E.CONSTRAINT_NAME, E.DELETE_RULE, E.FK_NULLABLE,
			F.R_VIEW_NAME2, F.FILTER_KEY_COLUMN, F.R_CONSTRAINT_NAME2, F.R_DELETE_RULE2, F.R_NULLABLE2,
			F.VIEW_NAME2, F.PARENT_KEY_COLUMN, F.PARENT_DELETE_RULE, F.PARENT_NULLABLE
		FROM MVDATA_BROWSER_FKEYS E, (
			SELECT F.VIEW_NAME R_VIEW_NAME, 
				F.FOREIGN_KEY_COLS FILTER_KEY_COLUMN, 
				F.R_VIEW_NAME R_VIEW_NAME2, 
				F.CONSTRAINT_NAME R_CONSTRAINT_NAME2, 
				F.DELETE_RULE R_DELETE_RULE2, 
				F.FK_NULLABLE R_NULLABLE2,
				G.VIEW_NAME VIEW_NAME2, 
				G.FOREIGN_KEY_COLS PARENT_KEY_COLUMN, 
				G.CONSTRAINT_NAME PARENT_CONSTRAINT_NAME, 
				G.DELETE_RULE PARENT_DELETE_RULE, 
				G.FK_NULLABLE PARENT_NULLABLE
			FROM MVDATA_BROWSER_FKEYS F, MVDATA_BROWSER_FKEYS G 
			WHERE G.R_VIEW_NAME = F.R_VIEW_NAME AND G.OWNER = F.OWNER -- back reference to base view 
			AND F.VIEW_NAME != G.VIEW_NAME -- no recursive relations (parent_id)
		) F 
		WHERE E.R_VIEW_NAME = F.R_VIEW_NAME (+) 
		AND E.VIEW_NAME = F.VIEW_NAME2 (+)
	)
	WHERE R_DELETE_RULE2 = 'CASCADE' AND R_NULLABLE2 = 'N' -- referenced table is container 
	AND PARENT_DELETE_RULE = 'CASCADE' AND PARENT_NULLABLE = 'N' -- referenced table is container 
	AND DELETE_RULE = 'CASCADE'
), TABLES_D_REFS AS ( -- find columns that match a name in g_ReferenceDescriptionCols for referenced table
    SELECT DISTINCT C.VIEW_NAME,
        COUNT(DISTINCT C.COLUMN_NAME) OVER (PARTITION BY C.VIEW_NAME) MEMBERS,
        LISTAGG(C.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY C.COLUMN_ID, C.POSITION) OVER (PARTITION BY C.VIEW_NAME) MATCHING_COLUMN_NAMES,
        FIRST_VALUE(C.COLUMN_NAME) OVER (PARTITION BY C.VIEW_NAME ORDER BY C.COLUMN_ID, C.POSITION) COLUMN_NAME,
		MAX(B.U_CONSTRAINT_NAME) OVER (PARTITION BY C.VIEW_NAME) U_CONSTRAINT_NAME
    FROM MVDATA_BROWSER_D_REFS C
    , MVDATA_BROWSER_U_REFS B 
    WHERE B.VIEW_NAME (+) = C.VIEW_NAME AND C.COLUMN_NAME = B.COLUMN_NAME (+)
), TABLES_U_REFS AS ( -- find unique column expression for referenced table
    SELECT DISTINCT C.VIEW_NAME,
		LISTAGG(C.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY C.POSITION) OVER (PARTITION BY C.VIEW_NAME) UNIQUE_COLUMN_NAMES,
		C.U_MEMBERS,
		C.HAS_NULLABLE,
		case when C.U_MEMBERS = 1 then 1 else 0 end HAS_SIMPLE_UNIQUE,
		C.U_CONSTRAINT_NAME
	FROM MVDATA_BROWSER_U_REFS C
    WHERE C.RANK = 1
), TABLES_C_REFS AS (
	SELECT DISTINCT A.VIEW_NAME, 
        COUNT(DISTINCT A.COLUMN_NAME) OVER (PARTITION BY VIEW_NAME) MEMBERS,
        LISTAGG(A.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY A.COLUMN_ID) OVER (PARTITION BY VIEW_NAME) CHAR_COLUMN_NAMES,
        FIRST_VALUE(A.COLUMN_NAME) OVER (PARTITION BY VIEW_NAME ORDER BY A.COLUMN_ID) COLUMN_NAME
	FROM VDATA_BROWSER_DISPLAY_COLS A
	WHERE COL_RANK < 5
)
SELECT E.*, 
	H.FILTER_KEY_COLUMN,  	-- column of table F.R_VIEW_NAME
	H.PARENT_KEY_COLUMN		-- column of table F.VIEW_NAME
FROM (
	SELECT DISTINCT
		TABLE_NAME, VIEW_NAME, CONSTRAINT_NAME,
		CAST(COLUMN_NAME AS VARCHAR2(500)) COLUMN_NAME,
		-- COLUMN_ID, 
		data_browser_conf.FN_Query_Cardinality(VIEW_NAME, COLUMN_NAME ) NUM_ROWS, -- count of rows with a value in column_name.
		DELETE_RULE, FK_COLUMN_ID, FK_NULLABLE, UNIQUE_KEY_COLS,
		R_TABLE_NAME, R_VIEW_NAME, R_NUM_ROWS, R_PRIMARY_KEY_COLS, R_UNIQUE_KEY_COLS,
		R_COLUMN_NAME,
		CAST(R_COLUMN_NAMES AS VARCHAR2(1024)) R_COLUMN_NAMES,
		R_MEMBERS,
		case when data_browser_pattern.Match_Admin_Tables(R_VIEW_NAME) = 'YES'
			then 'Y' ELSE 'N'
		end R_IS_ADMIN_TABLE,
		CAST(U_COLUMN_NAMES AS VARCHAR2(1024)) U_COLUMN_NAMES,
		U_CONSTRAINT_NAME, U_MEMBERS,
		CAST(DISPLAYED_COLUMN_NAMES AS VARCHAR2(1024)) DISPLAYED_COLUMN_NAMES,
		ORDERING_COLUMN_NAME,
		ACTIVE_LOV_COLUMN_NAME,
		CAST(ACTIVE_LOV_DATA_TYPE AS VARCHAR2(10))  ACTIVE_LOV_DATA_TYPE,
		FOLDER_NAME_COLUMN_NAME,
		FOLDER_PARENT_COLUMN_NAME,
		FOLDER_CONTAINER_COLUMN_NAME,
		CAST(TABLE_ALIAS AS VARCHAR2(10)) TABLE_ALIAS
	FROM (
		SELECT /*+ USE_MERGE(F R D U C) */
			F.TABLE_NAME,
			F.VIEW_NAME,
			F.CONSTRAINT_NAME,
			F.FOREIGN_KEY_COLS COLUMN_NAME,
			F.DELETE_RULE,
			F.FK_COLUMN_ID,
			F.FK_NULLABLE,
			F.UNIQUE_KEY_COLS,
			F.R_TABLE_NAME,
			F.R_VIEW_NAME,
			R.NUM_ROWS R_NUM_ROWS,
			F.R_PRIMARY_KEY_COLS,
			F.R_UNIQUE_KEY_COLS,
			NVL(D.COLUMN_NAME, C.COLUMN_NAME) R_COLUMN_NAME,
			NVL(D.MATCHING_COLUMN_NAMES, C.CHAR_COLUMN_NAMES) R_COLUMN_NAMES,
			NVL(D.MEMBERS, C.MEMBERS) R_MEMBERS,
			U.UNIQUE_COLUMN_NAMES U_COLUMN_NAMES,
			U.U_CONSTRAINT_NAME,
			U.U_MEMBERS,
			case when NVL(D.U_CONSTRAINT_NAME,'-') != U.U_CONSTRAINT_NAME
				and U.UNIQUE_COLUMN_NAMES IS NOT NULL and D.MATCHING_COLUMN_NAMES IS NOT NULL
				and INSTR(D.MATCHING_COLUMN_NAMES, U.UNIQUE_COLUMN_NAMES) = 0
			then
				data_browser_conf.Concat_List(U.UNIQUE_COLUMN_NAMES, D.MATCHING_COLUMN_NAMES)
			else
				COALESCE(U.UNIQUE_COLUMN_NAMES, D.MATCHING_COLUMN_NAMES, C.CHAR_COLUMN_NAMES, F.UNIQUE_KEY_COLS)
			end DISPLAYED_COLUMN_NAMES,
			ORDERING_COLUMN_NAME,
			ACTIVE_LOV_COLUMN_NAME,
			ACTIVE_LOV_DATA_TYPE,
			FOLDER_NAME_COLUMN_NAME,
			FOLDER_PARENT_COLUMN_NAME,
			FOLDER_CONTAINER_COLUMN_NAME,
			data_browser_conf.Sequence_To_Table_Alias(DENSE_RANK() OVER (PARTITION BY F.VIEW_NAME ORDER BY F.FK_COLUMN_ID)) TABLE_ALIAS
		FROM (
			SELECT F.TABLE_NAME,
				S.TABLE_OWNER,
				F.VIEW_NAME,
				F.CONSTRAINT_NAME,
				F.UNIQUE_KEY_COLS,
				F.FOREIGN_KEY_COLS,
				F.FK_COLUMN_ID,
				F.FK_NULLABLE,
				F.DELETE_RULE,
				F.R_TABLE_NAME,
				F.R_VIEW_NAME,
				F.R_UNIQUE_KEY_COLS,
				F.R_PRIMARY_KEY_COLS,
				S.ORDERING_COLUMN_NAME,
				S.ACTIVE_LOV_COLUMN_NAME,
				case when S.ACTIVE_LOV_COLUMN_NAME IS NOT NULL then 
					data_browser_conf.Get_Yes_No_Column_Type (
						p_Table_Name => S.TABLE_NAME,
						p_Table_Owner => S.TABLE_OWNER,
						p_Column_Name => S.ACTIVE_LOV_COLUMN_NAME
					) 
				end ACTIVE_LOV_DATA_TYPE,
				S.FOLDER_NAME_COLUMN_NAME,
				S.FOLDER_PARENT_COLUMN_NAME,
				S.FOLDER_CONTAINER_COLUMN_NAME
			FROM MVDATA_BROWSER_FKEYS F, MVDATA_BROWSER_DESCRIPTIONS S
			WHERE F.R_TABLE_NAME = S.TABLE_NAME AND F.OWNER = S.TABLE_OWNER
		) F
		, TABLE( data_browser_pipes.FN_Pipe_Table_Numrows) R
		, TABLES_D_REFS D
		, TABLES_U_REFS U
		, TABLES_C_REFS C
		WHERE F.R_TABLE_NAME = R.TABLE_NAME AND F.TABLE_OWNER = R.OWNER
		AND D.VIEW_NAME (+) = F.R_VIEW_NAME
		AND C.VIEW_NAME (+) = F.R_VIEW_NAME
		AND U.VIEW_NAME (+) = F.R_VIEW_NAME
	)
) E
, FOREIGN_KEY_PARENTS H 
WHERE E.R_VIEW_NAME = H.R_VIEW_NAME (+) AND E.VIEW_NAME = H.VIEW_NAME2 (+) AND E.COLUMN_NAME = H.COLUMN_NAME (+)
ORDER BY 1, 2
;

ALTER TABLE MVDATA_BROWSER_REFERENCES ADD
 CONSTRAINT MVDATA_BROWSER_REFERENCES_PK PRIMARY KEY (VIEW_NAME, COLUMN_NAME) USING INDEX;

CREATE INDEX MVDATA_BROWSER_REFERENCES_IND ON MVDATA_BROWSER_REFERENCES(R_VIEW_NAME, R_PRIMARY_KEY_COLS);


CREATE OR REPLACE VIEW VDATA_BROWSER_RULES (
	VIEW_NAME, COLUMN_NAME, HEADER, CHECK_CONDITION
)
AS
select D.VIEW_NAME, D.COLUMN_NAME, 
    data_browser_conf.Column_Name_to_Header(p_Column_Name => D.COLUMN_NAME, p_Remove_Extension => 'NO', p_Remove_Prefix => S.COLUMN_PREFIX) HEADER,
    data_browser_conf.Concat_List(data_browser_conf.Concat_List(
    case when D.CHECK_UNIQUE = 'Y' then apex_lang.lang('Unique')
        when D.CONSTRAINT_NAME != 'AUTOMATICALLY' then CHECK_CONDITION 
    end 
    , case when D.IS_FOREIGN_KEY = 'Y' then apex_lang.lang('Reference') end, '; ')
    , case when (D.REQUIRED = 'Y' and DATA_DEFAULT IS NULL) then apex_lang.lang('Required') end, '; ')
    CHECK_CONDITION
from MVDATA_BROWSER_CHECKS_DEFS D
join MVDATA_BROWSER_VIEWS S ON D.VIEW_NAME = S.VIEW_NAME
where (CHECK_UNIQUE = 'Y' or D.IS_FOREIGN_KEY = 'Y' 
or (D.REQUIRED = 'Y' and DATA_DEFAULT IS NULL) 
or D.CONSTRAINT_NAME != 'AUTOMATICALLY'
)
and not(S.HAS_SCALAR_PRIMARY_KEY = 'YES' and S.PRIMARY_KEY_COLS = D.COLUMN_NAME)
order by VIEW_NAME, CONS_COLS_COUNT, COLUMN_NAME;


/*
select *
from (
    select 'F' TYPE, VIEW_NAME, FOREIGN_KEY_COLS, R_VIEW_NAME, COLUMN_ID, R_COLUMN_ID, POSITION, COLUMN_HEADER, R_COLUMN_NAME, IMP_COLUMN_NAME, TABLE_ALIAS, '' R_TABLE_ALIAS, IS_READONLY, WARNING_MSG
    from MVDATA_BROWSER_F_REFS
    where view_name = 'JOB_HISTORY'
    UNION ALL
    select 'FC' TYPE, VIEW_NAME, FOREIGN_KEY_COLS, R_VIEW_NAME, COLUMN_ID, R_COLUMN_ID, POSITION, COLUMN_HEADER, R_COLUMN_NAME, IMP_COLUMN_NAME, TABLE_ALIAS, '' R_TABLE_ALIAS, R_IS_READONLY, NULL WARNING_MSG
    from TABLE(data_browser_select.FN_Pipe_browser_fc_refs('JOB_HISTORY'))
    UNION ALL
    select 'Q' TYPE, VIEW_NAME, FOREIGN_KEY_COLS, R_VIEW_NAME, COLUMN_ID, R_COLUMN_ID, POSITION, COLUMN_HEADER, R_COLUMN_NAME, IMP_COLUMN_NAME, TABLE_ALIAS, R_TABLE_ALIAS, IS_READONLY, WARNING_MSG
    from TABLE(data_browser_select.FN_Pipe_browser_q_refs('JOB_HISTORY'))
    UNION ALL
    select 'QC' TYPE, VIEW_NAME, COLUMN_NAME FOREIGN_KEY_COLS, R_VIEW_NAME, COLUMN_ID, R_COLUMN_ID, POSITION, COLUMN_HEADER, R_COLUMN_NAME, IMP_COLUMN_NAME, TABLE_ALIAS, R_TABLE_ALIAS, R_IS_READONLY, NULL WARNING_MSG
    from TABLE(data_browser_select.FN_Pipe_browser_qc_refs('JOB_HISTORY'))
    UNION ALL
    select 'C' TYPE, VIEW_NAME, null FOREIGN_KEY_COLS, VIEW_NAME R_VIEW_NAME, COLUMN_ID, COLUMN_ID R_COLUMN_ID, POSITION,
        COLUMN_NAME COLUMN_HEADER, COLUMN_NAME R_COLUMN_NAME, COLUMN_NAME IMP_COLUMN_NAME,
        'A' TABLE_ALIAS, 'A' R_TABLE_ALIAS, IS_READONLY R_IS_READONLY, '' WARNING_MSG
    from MVDATA_BROWSER_SIMPLE_COLS where view_name = 'JOB_HISTORY'
) 
order by LENGTH(TYPE), COLUMN_ID, R_COLUMN_ID, POSITION;

*/

