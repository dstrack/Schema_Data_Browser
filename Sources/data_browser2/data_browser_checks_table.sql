/*
Copyright 2020 Dirk Strack, Strack Software Development

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

declare 
	v_count NUMBER;
	v_stat VARCHAR2(32767);
begin
	SELECT COUNT(*) INTO v_count
	FROM USER_TABLES WHERE TABLE_NAME = 'DATA_BROWSER_CHECKS';
	if v_count = 0 then 
		v_stat := q'[
		CREATE TABLE DATA_BROWSER_CHECKS (
			SEQUENCE_ID NUMBER NOT NULL  CONSTRAINT DATA_BROWSER_CHECKS_PK PRIMARY KEY,
			VIEW_NAME VARCHAR2(128) NOT NULL,
			VIEW_MODE VARCHAR2(128) NOT NULL,
			REPORT_MODE VARCHAR2(10) NOT NULL,
			EDIT_MODE VARCHAR2(10) NOT NULL,
			ROW_OPERATOR VARCHAR2(10) NOT NULL,
			DATA_SOURCE VARCHAR2(10) NOT NULL,
			DATA_FORMAT VARCHAR2(10) NOT NULL,
			EMPTY_ROWS VARCHAR2(10) NOT NULL,
			JOIN_OPTIONS VARCHAR2(1024),
			COLUMNS_LIMIT NUMBER,
			PARENT_KEY_VISIBLE VARCHAR2(10),
			SEARCH_TEXT VARCHAR2(10),
			LINK_KEY VARCHAR2(1024),
			LINK_ID VARCHAR2(1024),
			PARENT_NAME VARCHAR2(128),
			PARENT_KEY_COLUMN VARCHAR2(128),
			ORDER_BY VARCHAR2(1024),
			CONTROL_BREAK VARCHAR2(1024),
			CALC_SUBTOTALS VARCHAR2(10),
			NESTED_LINKS VARCHAR2(10),
			IMP_COMPARE_CASE_INSENSITIVE VARCHAR2(10),
			IMP_SEARCH_KEYS_UNIQUE VARCHAR2(10),
			IMP_INSERT_FOREIGN_KEYS VARCHAR2(10),
			QUERY_TEXT CLOB,
			QUERY_LENGTH NUMBER,
			QUERY_GENERATION_TIME INTEGER,
			QUERY_PARSE_TIME INTEGER,
			QUERY_EXECUTE_TIME INTEGER,
			QUERY_SQL_CODE NUMBER,
			QUERY_SQL_MESSAGE VARCHAR2(1000),
			QUERY_ROW_COUNT NUMBER,
			QUERY_COL_COUNT NUMBER,
			VALIDATION_TEXT CLOB,
			VALIDATION_LENGTH NUMBER,
			VALIDATION_PARSE_TIME INTEGER,
			VALIDATION_SQL_CODE NUMBER,
			VALIDATION_SQL_MESSAGE VARCHAR2(1000),
			VALIDATION_ROW_COUNT NUMBER,
			LOOKUP_TEXT CLOB,
			LOOKUP_LENGTH NUMBER,
			LOOKUP_PARSE_TIME INTEGER,
			LOOKUP_SQL_CODE NUMBER,
			LOOKUP_SQL_MESSAGE VARCHAR2(1000),
			DML_TEXT CLOB,
			DML_LENGTH NUMBER,
			DML_PARSE_TIME INTEGER,
			DML_SQL_CODE NUMBER,
			DML_SQL_MESSAGE VARCHAR2(1000),
			DML_ROW_COUNT NUMBER,
			ELAPSED_TIME INTEGER,
			CHECKED CHAR(1) DEFAULT 'N' NOT NULL,
			CHECKED_IMPORT CHAR(1) DEFAULT 'N' NOT NULL,
			CHECKED_GUI_GET CHAR(1) DEFAULT 'N' NOT NULL,
			CHECKED_GUI_PUT CHAR(1) DEFAULT 'N' NOT NULL
		)
		]';
		EXECUTE IMMEDIATE v_Stat;
		v_stat := q'[
		CREATE SEQUENCE DATA_BROWSER_CHECKS_SEQ START WITH 1 INCREMENT BY 1 NOCYCLE
		]';
		EXECUTE IMMEDIATE v_Stat;
		v_stat := q'[
		CREATE OR REPLACE TRIGGER "DATA_BROWSER_CHECKS_BI_TR" 
		BEFORE INSERT ON DATA_BROWSER_CHECKS FOR EACH ROW 
		BEGIN 
			SELECT DATA_BROWSER_CHECKS_SEQ.NEXTVAL INTO :new.SEQUENCE_ID FROM DUAL;
		END;
		]';
		EXECUTE IMMEDIATE v_Stat;
	end if;


	SELECT COUNT(*) INTO v_count
	FROM USER_TAB_COLS WHERE TABLE_NAME = 'DATA_BROWSER_CHECKS' AND COLUMN_NAME = 'CHECK_FAILS';
	if v_count = 0 then 
		v_stat := q'[
		ALTER TABLE DATA_BROWSER_CHECKS ADD (
			CHECK_FAILS CHAR(1) GENERATED ALWAYS AS (
				case when (checked = 'Y' or checked_import = 'Y')
					and coalesce(QUERY_SQL_CODE,VALIDATION_SQL_CODE,LOOKUP_SQL_CODE,DML_SQL_CODE) IS NOT NULL 
				then 'Y' else 'N' end
			) VIRTUAL,
			CHECK_GUI_GET_RELEVANT CHAR(1) GENERATED ALWAYS AS (
				case when REPORT_MODE = 'YES'
					AND SEARCH_TEXT = 'NO'
					AND DATA_SOURCE IN ( 'TABLE', 'NEW_ROWS')
					and DATA_FORMAT = 'FORM'
					AND ROW_OPERATOR = 'UPDATE'
					AND (EDIT_MODE = 'YES' OR DATA_SOURCE = 'TABLE' )
				then 'Y' else 'N' end
			) VIRTUAL,
			CHECK_GUI_PUT_RELEVANT CHAR(1) GENERATED ALWAYS AS (
				case when REPORT_MODE = 'YES'
					AND SEARCH_TEXT = 'NO'
					AND DATA_SOURCE IN ( 'TABLE', 'NEW_ROWS')
					and DATA_FORMAT = 'FORM'
					AND ROW_OPERATOR = 'UPDATE'
					and EDIT_MODE = 'YES' 
					and DATA_SOURCE = 'TABLE'
				then 'Y' else 'N' end
			) VIRTUAL,
			CHECK_GUI_IMP_RELEVANT CHAR(1) GENERATED ALWAYS AS (
				case when REPORT_MODE = 'YES'
					and VIEW_MODE = 'IMPORT_VIEW'
					and DATA_SOURCE = 'TABLE'
					and DATA_FORMAT = 'FORM'
					and EDIT_MODE = 'YES'
					and EMPTY_ROWS = 'NO'
					and PARENT_KEY_VISIBLE = 'YES'
					and ROW_OPERATOR = 'UPDATE'
					and SEARCH_TEXT = 'NO'
					and IMP_COMPARE_CASE_INSENSITIVE = 'NO'
					and IMP_SEARCH_KEYS_UNIQUE = 'NO'
					and IMP_INSERT_FOREIGN_KEYS = 'NO' -- ?? YES/NO
				then 'Y' else 'N' end
			) VIRTUAL
		)
		]';
		EXECUTE IMMEDIATE v_Stat;
		v_stat := q'[
		CREATE INDEX DATA_BROWSER_CHECKS_IND1 ON DATA_BROWSER_CHECKS(CHECK_GUI_GET_RELEVANT, CHECKED_GUI_GET)
		]';
		EXECUTE IMMEDIATE v_Stat;
		v_stat := q'[
		CREATE INDEX DATA_BROWSER_CHECKS_IND2 ON DATA_BROWSER_CHECKS(CHECK_GUI_PUT_RELEVANT, CHECKED_GUI_PUT)
		]';
		EXECUTE IMMEDIATE v_Stat;
		v_stat := q'[
		CREATE INDEX DATA_BROWSER_CHECKS_IND3 ON DATA_BROWSER_CHECKS(CHECK_GUI_IMP_RELEVANT, CHECKED_GUI_PUT)
		]';
		EXECUTE IMMEDIATE v_Stat;
	end if;
end;
/
show errors

