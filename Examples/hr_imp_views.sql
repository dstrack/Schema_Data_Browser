CREATE OR REPLACE VIEW VCOUNTRIES_IMP
    ( LINK_ID$, COUNTRY_ID, COUNTRY_NAME, REGION_REGION_NAME
    , CONSTRAINT VCOUNTRIES_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.COUNTRIES_ID LINK_ID$,
    A.COUNTRY_ID,
    A.COUNTRY_NAME,
    B.REGION_NAME REGION_REGION_NAME
FROM COUNTRIES A
LEFT OUTER JOIN REGIONS B ON B.REGION_ID = A.REGION_ID;

CREATE OR REPLACE TRIGGER VCOUNTRIES_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VCOUNTRIES_IMP FOR EACH ROW  
DECLARE 
    v_row COUNTRIES%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM COUNTRIES A 
        WHERE A.COUNTRIES_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.COUNTRY_ID                       := :new.COUNTRY_ID;
    v_row.COUNTRY_NAME                     := :new.COUNTRY_NAME;
    v_row.COUNTRIES_ID                     := :new.LINK_ID$;
    if :new.REGION_REGION_NAME IS NOT NULL then 
      begin
        SELECT B.REGION_ID INTO v_row.REGION_ID
        FROM REGIONS B 
        WHERE B.REGION_NAME = :new.REGION_REGION_NAME;
      exception when NO_DATA_FOUND then
        INSERT INTO REGIONS(REGION_NAME) VALUES (:new.REGION_REGION_NAME) RETURNING (REGION_ID) INTO v_row.REGION_ID;
      end;
    end if;

    if INSERTING OR v_row.COUNTRIES_ID IS NULL then 
        INSERT INTO COUNTRIES VALUES v_row;
    else 
        UPDATE COUNTRIES SET ROW = v_row
        WHERE COUNTRIES_ID = v_row.COUNTRIES_ID;
    end if;
END VCOUNTRIES_IMP_TR;

/

CREATE OR REPLACE VIEW VDEPARTMENTS_IMP
    ( LINK_ID$, DEPARTMENT_NAME, MANAGER_EMAIL, LOCATION_STREET_ADDRESS, LOCATION_POSTAL_CODE, LOCATION_CITY, LOCATION_STATE_PROVINCE
    , CONSTRAINT VDEPARTMENTS_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.DEPARTMENT_ID LINK_ID$,
    A.DEPARTMENT_NAME,
    B.EMAIL MANAGER_EMAIL,
    C.STREET_ADDRESS LOCATION_STREET_ADDRESS,
    C.POSTAL_CODE LOCATION_POSTAL_CODE,
    C.CITY LOCATION_CITY,
    C.STATE_PROVINCE LOCATION_STATE_PROVINCE
FROM DEPARTMENTS A
LEFT OUTER JOIN EMPLOYEES B ON B.EMPLOYEE_ID = A.MANAGER_ID
LEFT OUTER JOIN LOCATIONS C ON C.LOCATION_ID = A.LOCATION_ID;

CREATE OR REPLACE TRIGGER VDEPARTMENTS_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VDEPARTMENTS_IMP FOR EACH ROW  
DECLARE 
    v_row DEPARTMENTS%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM DEPARTMENTS A 
        WHERE A.DEPARTMENT_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.DEPARTMENT_ID                    := :new.LINK_ID$;
    v_row.DEPARTMENT_NAME                  := :new.DEPARTMENT_NAME;
    if :new.LOCATION_STREET_ADDRESS IS NOT NULL OR :new.LOCATION_POSTAL_CODE IS NOT NULL OR :new.LOCATION_CITY IS NOT NULL OR :new.LOCATION_STATE_PROVINCE IS NOT NULL then 
      begin
        SELECT C.LOCATION_ID INTO v_row.LOCATION_ID
        FROM LOCATIONS C 
        WHERE (C.STREET_ADDRESS = :new.LOCATION_STREET_ADDRESS OR :new.LOCATION_STREET_ADDRESS IS NULL)
        AND (C.POSTAL_CODE = :new.LOCATION_POSTAL_CODE OR C.POSTAL_CODE IS NULL AND :new.LOCATION_POSTAL_CODE IS NULL)
        AND (C.CITY = :new.LOCATION_CITY OR :new.LOCATION_CITY IS NULL)
        AND (C.STATE_PROVINCE = :new.LOCATION_STATE_PROVINCE OR C.STATE_PROVINCE IS NULL AND :new.LOCATION_STATE_PROVINCE IS NULL);
      exception when NO_DATA_FOUND then
        INSERT INTO LOCATIONS(STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE) VALUES (:new.LOCATION_STREET_ADDRESS, :new.LOCATION_POSTAL_CODE, :new.LOCATION_CITY, :new.LOCATION_STATE_PROVINCE) RETURNING (LOCATION_ID) INTO v_row.LOCATION_ID;
      end;
    end if;
    if :new.MANAGER_EMAIL IS NOT NULL then 
        SELECT B.EMPLOYEE_ID INTO v_row.MANAGER_ID
        FROM EMPLOYEES B 
        WHERE B.EMAIL = :new.MANAGER_EMAIL;
    end if;

    if INSERTING OR v_row.DEPARTMENT_ID IS NULL then 
        INSERT INTO DEPARTMENTS VALUES v_row;
    else 
        UPDATE DEPARTMENTS SET ROW = v_row
        WHERE DEPARTMENT_ID = v_row.DEPARTMENT_ID;
    end if;
END VDEPARTMENTS_IMP_TR;

/

CREATE OR REPLACE VIEW VDIAGRAM_COLORS_IMP
    ( LINK_ID$, COLOR_NAME, HEX_RGB, RED_RGB, GREEN_RGB, BLUE_RGB, ACTIVE
    , CONSTRAINT VDIAGRAM_COLORS_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.ID LINK_ID$,
    A.COLOR_NAME,
    A.HEX_RGB,
    A.RED_RGB,
    A.GREEN_RGB,
    A.BLUE_RGB,
    A.ACTIVE
FROM DIAGRAM_COLORS A;

CREATE OR REPLACE TRIGGER VDIAGRAM_COLORS_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VDIAGRAM_COLORS_IMP FOR EACH ROW  
DECLARE 
    v_row DIAGRAM_COLORS%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM DIAGRAM_COLORS A 
        WHERE A.ID = :new.LINK_ID$;
        return;
    end if;
    v_row.ID                               := :new.LINK_ID$;
    v_row.COLOR_NAME                       := :new.COLOR_NAME;
    v_row.HEX_RGB                          := :new.HEX_RGB;
    v_row.RED_RGB                          := :new.RED_RGB;
    v_row.GREEN_RGB                        := :new.GREEN_RGB;
    v_row.BLUE_RGB                         := :new.BLUE_RGB;
    v_row.ACTIVE                           := :new.ACTIVE;

    if INSERTING OR v_row.ID IS NULL then 
        v_row.ACTIVE                           := NVL(v_row.ACTIVE, 'Y');
        INSERT INTO DIAGRAM_COLORS VALUES v_row;
    else 
        UPDATE DIAGRAM_COLORS SET ROW = v_row
        WHERE ID = v_row.ID;
    end if;
END VDIAGRAM_COLORS_IMP_TR;

/

CREATE OR REPLACE VIEW VDIAGRAM_EDGES_IMP
    ( LINK_ID$, SOURCE_NODE_DESCRIPTION, TARGET_NODE_DESCRIPTION, DESCRIPTION, COLOR, HEX_RGB, DIAGRAM_COLOR_COLOR_NAME, SPRINGY_DIAGRAMS_DESCRIPTION
    , CONSTRAINT VDIAGRAM_EDGES_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.ID LINK_ID$,
    B.DESCRIPTION SOURCE_NODE_DESCRIPTION,
    C.DESCRIPTION TARGET_NODE_DESCRIPTION,
    A.DESCRIPTION,
    A.COLOR,
    A.HEX_RGB,
    D.COLOR_NAME DIAGRAM_COLOR_COLOR_NAME,
    E.DESCRIPTION SPRINGY_DIAGRAMS_DESCRIPTION
FROM DIAGRAM_EDGES A
JOIN DIAGRAM_NODES B ON B.ID = A.SOURCE_NODE_ID
JOIN DIAGRAM_NODES C ON C.ID = A.TARGET_NODE_ID
LEFT OUTER JOIN DIAGRAM_COLORS D ON D.ID = A.DIAGRAM_COLOR_ID
JOIN SPRINGY_DIAGRAMS E ON E.ID = A.SPRINGY_DIAGRAMS_ID;

CREATE OR REPLACE TRIGGER VDIAGRAM_EDGES_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VDIAGRAM_EDGES_IMP FOR EACH ROW  
DECLARE 
    v_row DIAGRAM_EDGES%ROWTYPE;
    v_SOURCE_NODE_SPRINGY_DIAGRAMS SPRINGY_DIAGRAMS.ID%TYPE;
    v_TARGET_NODE_SPRINGY_DIAGRAMS SPRINGY_DIAGRAMS.ID%TYPE;
BEGIN
    if DELETING then 
        DELETE FROM DIAGRAM_EDGES A 
        WHERE A.ID = :new.LINK_ID$;
        return;
    end if;
    v_row.ID                               := :new.LINK_ID$;
    v_row.DESCRIPTION                      := :new.DESCRIPTION;
    v_row.COLOR                            := :new.COLOR;
    v_row.HEX_RGB                          := :new.HEX_RGB;
    if :new.DIAGRAM_COLOR_COLOR_NAME IS NOT NULL then 
        SELECT D.ID INTO v_row.DIAGRAM_COLOR_ID
        FROM DIAGRAM_COLORS D 
        WHERE D.COLOR_NAME = :new.DIAGRAM_COLOR_COLOR_NAME;
    end if;
    if :new.SPRINGY_DIAGRAMS_DESCRIPTION IS NOT NULL then 
      begin
        SELECT E.ID INTO v_row.SPRINGY_DIAGRAMS_ID
        FROM SPRINGY_DIAGRAMS E 
        WHERE E.DESCRIPTION = :new.SPRINGY_DIAGRAMS_DESCRIPTION;
      exception when NO_DATA_FOUND then
        INSERT INTO SPRINGY_DIAGRAMS(DESCRIPTION) VALUES (:new.SPRINGY_DIAGRAMS_DESCRIPTION) RETURNING (ID) INTO v_row.SPRINGY_DIAGRAMS_ID;
      end;
        v_SOURCE_NODE_SPRINGY_DIAGRAMS := v_row.SPRINGY_DIAGRAMS_ID;
        v_TARGET_NODE_SPRINGY_DIAGRAMS := v_row.SPRINGY_DIAGRAMS_ID;
    end if;
    if v_SOURCE_NODE_SPRINGY_DIAGRAMS IS NOT NULL AND :new.SOURCE_NODE_DESCRIPTION IS NOT NULL then 
      begin
        SELECT B.ID INTO v_row.SOURCE_NODE_ID
        FROM DIAGRAM_NODES B 
        WHERE B.SPRINGY_DIAGRAMS_ID = v_SOURCE_NODE_SPRINGY_DIAGRAMS
        AND B.DESCRIPTION = :new.SOURCE_NODE_DESCRIPTION;
      exception when NO_DATA_FOUND then
        INSERT INTO DIAGRAM_NODES(SPRINGY_DIAGRAMS_ID, DESCRIPTION) VALUES (v_SOURCE_NODE_SPRINGY_DIAGRAMS, :new.SOURCE_NODE_DESCRIPTION) RETURNING (ID) INTO v_row.SOURCE_NODE_ID;
      end;
    end if;
    if v_TARGET_NODE_SPRINGY_DIAGRAMS IS NOT NULL AND :new.TARGET_NODE_DESCRIPTION IS NOT NULL then 
      begin
        SELECT C.ID INTO v_row.TARGET_NODE_ID
        FROM DIAGRAM_NODES C 
        WHERE C.SPRINGY_DIAGRAMS_ID = v_TARGET_NODE_SPRINGY_DIAGRAMS
        AND C.DESCRIPTION = :new.TARGET_NODE_DESCRIPTION;
      exception when NO_DATA_FOUND then
        INSERT INTO DIAGRAM_NODES(SPRINGY_DIAGRAMS_ID, DESCRIPTION) VALUES (v_TARGET_NODE_SPRINGY_DIAGRAMS, :new.TARGET_NODE_DESCRIPTION) RETURNING (ID) INTO v_row.TARGET_NODE_ID;
      end;
    end if;

    if INSERTING OR v_row.ID IS NULL then 
        v_row.COLOR                            := NVL(v_row.COLOR, 'DarkGrey');
        INSERT INTO DIAGRAM_EDGES VALUES v_row;
    else 
        UPDATE DIAGRAM_EDGES SET ROW = v_row
        WHERE ID = v_row.ID;
    end if;
END VDIAGRAM_EDGES_IMP_TR;

/

CREATE OR REPLACE VIEW VDIAGRAM_NODES_IMP
    ( LINK_ID$, SPRINGY_DIAGRAMS_DESCRIPTION, DESCRIPTION, ACTIVE, DIAGRAM_SHAPES_DESCRIPTION, COLOR, X_COORDINATE, Y_COORDINATE, MASS, HEX_RGB, DIAGRAM_COLOR_COLOR_NAME
    , CONSTRAINT VDIAGRAM_NODES_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.ID LINK_ID$,
    B.DESCRIPTION SPRINGY_DIAGRAMS_DESCRIPTION,
    A.DESCRIPTION,
    A.ACTIVE,
    C.DESCRIPTION DIAGRAM_SHAPES_DESCRIPTION,
    A.COLOR,
    A.X_COORDINATE,
    A.Y_COORDINATE,
    A.MASS,
    A.HEX_RGB,
    D.COLOR_NAME DIAGRAM_COLOR_COLOR_NAME
FROM DIAGRAM_NODES A
JOIN SPRINGY_DIAGRAMS B ON B.ID = A.SPRINGY_DIAGRAMS_ID
JOIN DIAGRAM_SHAPES C ON C.ID = A.DIAGRAM_SHAPES_ID
LEFT OUTER JOIN DIAGRAM_COLORS D ON D.ID = A.DIAGRAM_COLOR_ID;

CREATE OR REPLACE TRIGGER VDIAGRAM_NODES_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VDIAGRAM_NODES_IMP FOR EACH ROW  
DECLARE 
    v_row DIAGRAM_NODES%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM DIAGRAM_NODES A 
        WHERE A.ID = :new.LINK_ID$;
        return;
    end if;
    v_row.ID                               := :new.LINK_ID$;
    v_row.DESCRIPTION                      := :new.DESCRIPTION;
    v_row.ACTIVE                           := :new.ACTIVE;
    v_row.COLOR                            := :new.COLOR;
    v_row.X_COORDINATE                     := :new.X_COORDINATE;
    v_row.Y_COORDINATE                     := :new.Y_COORDINATE;
    v_row.MASS                             := :new.MASS;
    v_row.HEX_RGB                          := :new.HEX_RGB;
    if :new.SPRINGY_DIAGRAMS_DESCRIPTION IS NOT NULL then 
      begin
        SELECT B.ID INTO v_row.SPRINGY_DIAGRAMS_ID
        FROM SPRINGY_DIAGRAMS B 
        WHERE B.DESCRIPTION = :new.SPRINGY_DIAGRAMS_DESCRIPTION;
      exception when NO_DATA_FOUND then
        INSERT INTO SPRINGY_DIAGRAMS(DESCRIPTION) VALUES (:new.SPRINGY_DIAGRAMS_DESCRIPTION) RETURNING (ID) INTO v_row.SPRINGY_DIAGRAMS_ID;
      end;
    end if;
    if :new.DIAGRAM_SHAPES_DESCRIPTION IS NOT NULL then 
      begin
        SELECT C.ID INTO v_row.DIAGRAM_SHAPES_ID
        FROM DIAGRAM_SHAPES C 
        WHERE C.DESCRIPTION = :new.DIAGRAM_SHAPES_DESCRIPTION;
      exception when NO_DATA_FOUND then
        INSERT INTO DIAGRAM_SHAPES(DESCRIPTION) VALUES (:new.DIAGRAM_SHAPES_DESCRIPTION) RETURNING (ID) INTO v_row.DIAGRAM_SHAPES_ID;
      end;
    end if;
    if :new.DIAGRAM_COLOR_COLOR_NAME IS NOT NULL then 
        SELECT D.ID INTO v_row.DIAGRAM_COLOR_ID
        FROM DIAGRAM_COLORS D 
        WHERE D.COLOR_NAME = :new.DIAGRAM_COLOR_COLOR_NAME;
    end if;

    if INSERTING OR v_row.ID IS NULL then 
        v_row.ACTIVE                           := NVL(v_row.ACTIVE, 'Y');
        v_row.DIAGRAM_SHAPES_ID                := NVL(v_row.DIAGRAM_SHAPES_ID, 7);
        v_row.X_COORDINATE                     := NVL(v_row.X_COORDINATE, 0);
        v_row.Y_COORDINATE                     := NVL(v_row.Y_COORDINATE, 0);
        v_row.MASS                             := NVL(v_row.MASS, 1);
        INSERT INTO DIAGRAM_NODES VALUES v_row;
    else 
        UPDATE DIAGRAM_NODES SET ROW = v_row
        WHERE ID = v_row.ID;
    end if;
END VDIAGRAM_NODES_IMP_TR;

/

CREATE OR REPLACE VIEW VDIAGRAM_SHAPES_IMP
    ( LINK_ID$, DESCRIPTION, ACTIVE
    , CONSTRAINT VDIAGRAM_SHAPES_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.ID LINK_ID$,
    A.DESCRIPTION,
    A.ACTIVE
FROM DIAGRAM_SHAPES A;

CREATE OR REPLACE TRIGGER VDIAGRAM_SHAPES_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VDIAGRAM_SHAPES_IMP FOR EACH ROW  
DECLARE 
    v_row DIAGRAM_SHAPES%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM DIAGRAM_SHAPES A 
        WHERE A.ID = :new.LINK_ID$;
        return;
    end if;
    v_row.ID                               := :new.LINK_ID$;
    v_row.DESCRIPTION                      := :new.DESCRIPTION;
    v_row.ACTIVE                           := :new.ACTIVE;

    if INSERTING OR v_row.ID IS NULL then 
        v_row.ACTIVE                           := NVL(v_row.ACTIVE, 'Y');
        INSERT INTO DIAGRAM_SHAPES VALUES v_row;
    else 
        UPDATE DIAGRAM_SHAPES SET ROW = v_row
        WHERE ID = v_row.ID;
    end if;
END VDIAGRAM_SHAPES_IMP_TR;

/

CREATE OR REPLACE VIEW VEMPLOYEES_IMP
    ( LINK_ID$, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_JOB_TITLE, SALARY, COMMISSION_PCT, MANAGER_EMAIL, DEPARTMENT_DEPARTMENT_NAME, DEPARTMENT_MANAGER_EMAIL, DEPARTMENT_LOCATION_STREET_AD, DEPARTMENT_LOCATION_POSTAL_CO, DEPARTMENT_LOCATION_CITY, DEPARTMENT_LOCATION_STATE_PRO
    , CONSTRAINT VEMPLOYEES_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.EMPLOYEE_ID LINK_ID$,
    A.FIRST_NAME,
    A.LAST_NAME,
    A.EMAIL,
    A.PHONE_NUMBER,
    A.HIRE_DATE,
    B.JOB_TITLE JOB_JOB_TITLE,
    A.SALARY,
    A.COMMISSION_PCT,
    C.EMAIL MANAGER_EMAIL,
    D.DEPARTMENT_NAME DEPARTMENT_DEPARTMENT_NAME,
    D_B.EMAIL DEPARTMENT_MANAGER_EMAIL,
    D_C.STREET_ADDRESS DEPARTMENT_LOCATION_STREET_AD,
    D_C.POSTAL_CODE DEPARTMENT_LOCATION_POSTAL_CO,
    D_C.CITY DEPARTMENT_LOCATION_CITY,
    D_C.STATE_PROVINCE DEPARTMENT_LOCATION_STATE_PRO
FROM EMPLOYEES A
JOIN JOBS B ON B.JOB_ID = A.JOB_ID
LEFT OUTER JOIN EMPLOYEES C ON C.EMPLOYEE_ID = A.MANAGER_ID
LEFT OUTER JOIN DEPARTMENTS D ON D.DEPARTMENT_ID = A.DEPARTMENT_ID
LEFT OUTER JOIN EMPLOYEES D_B ON D_B.EMPLOYEE_ID = D.MANAGER_ID
LEFT OUTER JOIN LOCATIONS D_C ON D_C.LOCATION_ID = D.LOCATION_ID;

CREATE OR REPLACE TRIGGER VEMPLOYEES_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VEMPLOYEES_IMP FOR EACH ROW  
DECLARE 
    v_row EMPLOYEES%ROWTYPE;
    v_DEPARTMENT_LOCATION_ID LOCATIONS.LOCATION_ID%TYPE;
    v_DEPARTMENT_MANAGER_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
    if DELETING then 
        DELETE FROM EMPLOYEES A 
        WHERE A.EMPLOYEE_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.EMPLOYEE_ID                      := :new.LINK_ID$;
    v_row.FIRST_NAME                       := :new.FIRST_NAME;
    v_row.LAST_NAME                        := :new.LAST_NAME;
    v_row.EMAIL                            := :new.EMAIL;
    v_row.PHONE_NUMBER                     := :new.PHONE_NUMBER;
    v_row.HIRE_DATE                        := :new.HIRE_DATE;
    v_row.SALARY                           := :new.SALARY;
    v_row.COMMISSION_PCT                   := :new.COMMISSION_PCT;
    if :new.JOB_JOB_TITLE IS NOT NULL then 
        SELECT B.JOB_ID INTO v_row.JOB_ID
        FROM JOBS B 
        WHERE B.JOB_TITLE = :new.JOB_JOB_TITLE;
    end if;
    if :new.MANAGER_EMAIL IS NOT NULL then 
        SELECT C.EMPLOYEE_ID INTO v_row.MANAGER_ID
        FROM EMPLOYEES C 
        WHERE C.EMAIL = :new.MANAGER_EMAIL;
    end if;
    if :new.DEPARTMENT_MANAGER_EMAIL IS NOT NULL then 
        SELECT D_B.EMPLOYEE_ID INTO v_DEPARTMENT_MANAGER_ID
        FROM EMPLOYEES D_B 
        WHERE D_B.EMAIL = :new.DEPARTMENT_MANAGER_EMAIL;
    end if;
    if :new.DEPARTMENT_LOCATION_CITY IS NOT NULL OR :new.DEPARTMENT_LOCATION_POSTAL_CO IS NOT NULL OR :new.DEPARTMENT_LOCATION_STATE_PRO IS NOT NULL OR :new.DEPARTMENT_LOCATION_STREET_AD IS NOT NULL then 
      begin
        SELECT D_C.LOCATION_ID INTO v_DEPARTMENT_LOCATION_ID
        FROM LOCATIONS D_C 
        WHERE (D_C.CITY = :new.DEPARTMENT_LOCATION_CITY OR :new.DEPARTMENT_LOCATION_CITY IS NULL)
        AND (D_C.POSTAL_CODE = :new.DEPARTMENT_LOCATION_POSTAL_CO OR D_C.POSTAL_CODE IS NULL AND :new.DEPARTMENT_LOCATION_POSTAL_CO IS NULL)
        AND (D_C.STATE_PROVINCE = :new.DEPARTMENT_LOCATION_STATE_PRO OR D_C.STATE_PROVINCE IS NULL AND :new.DEPARTMENT_LOCATION_STATE_PRO IS NULL)
        AND (D_C.STREET_ADDRESS = :new.DEPARTMENT_LOCATION_STREET_AD OR :new.DEPARTMENT_LOCATION_STREET_AD IS NULL);
      exception when NO_DATA_FOUND then
        INSERT INTO LOCATIONS(CITY, POSTAL_CODE, STATE_PROVINCE, STREET_ADDRESS) VALUES (:new.DEPARTMENT_LOCATION_CITY, :new.DEPARTMENT_LOCATION_POSTAL_CO, :new.DEPARTMENT_LOCATION_STATE_PRO, :new.DEPARTMENT_LOCATION_STREET_AD) RETURNING (LOCATION_ID) INTO v_DEPARTMENT_LOCATION_ID;
      end;
    end if;
    if :new.DEPARTMENT_DEPARTMENT_NAME IS NOT NULL OR v_DEPARTMENT_MANAGER_ID IS NOT NULL OR v_DEPARTMENT_LOCATION_ID IS NOT NULL then 
      begin
        SELECT D.DEPARTMENT_ID INTO v_row.DEPARTMENT_ID
        FROM DEPARTMENTS D 
        WHERE (D.DEPARTMENT_NAME = :new.DEPARTMENT_DEPARTMENT_NAME OR :new.DEPARTMENT_DEPARTMENT_NAME IS NULL)
        AND (D.MANAGER_ID = v_DEPARTMENT_MANAGER_ID OR D.MANAGER_ID IS NULL AND v_DEPARTMENT_MANAGER_ID IS NULL)
        AND (D.LOCATION_ID = v_DEPARTMENT_LOCATION_ID OR D.LOCATION_ID IS NULL AND v_DEPARTMENT_LOCATION_ID IS NULL);
      exception when NO_DATA_FOUND then
        INSERT INTO DEPARTMENTS(DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES (:new.DEPARTMENT_DEPARTMENT_NAME, v_DEPARTMENT_MANAGER_ID, v_DEPARTMENT_LOCATION_ID) RETURNING (DEPARTMENT_ID) INTO v_row.DEPARTMENT_ID;
      end;
    end if;

    if INSERTING OR v_row.EMPLOYEE_ID IS NULL then 
        INSERT INTO EMPLOYEES VALUES v_row;
    else 
        UPDATE EMPLOYEES SET ROW = v_row
        WHERE EMPLOYEE_ID = v_row.EMPLOYEE_ID;
    end if;
END VEMPLOYEES_IMP_TR;

/

CREATE OR REPLACE VIEW VJOBS_IMP
    ( LINK_ID$, JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY
    , CONSTRAINT VJOBS_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.JOBS_ID LINK_ID$,
    A.JOB_ID,
    A.JOB_TITLE,
    A.MIN_SALARY,
    A.MAX_SALARY
FROM JOBS A;

CREATE OR REPLACE TRIGGER VJOBS_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VJOBS_IMP FOR EACH ROW  
DECLARE 
    v_row JOBS%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM JOBS A 
        WHERE A.JOBS_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.JOB_ID                           := :new.JOB_ID;
    v_row.JOB_TITLE                        := :new.JOB_TITLE;
    v_row.MIN_SALARY                       := :new.MIN_SALARY;
    v_row.MAX_SALARY                       := :new.MAX_SALARY;
    v_row.JOBS_ID                          := :new.LINK_ID$;

    if INSERTING OR v_row.JOBS_ID IS NULL then 
        INSERT INTO JOBS VALUES v_row;
    else 
        UPDATE JOBS SET ROW = v_row
        WHERE JOBS_ID = v_row.JOBS_ID;
    end if;
END VJOBS_IMP_TR;

/

CREATE OR REPLACE VIEW VJOB_HISTORY_IMP
    ( LINK_ID$, EMPLOYEE_EMAIL, START_DATE, END_DATE, JOB_JOB_TITLE, DEPARTMENT_DEPARTMENT_NAME, DEPARTMENT_MANAGER, DEPARTMENT_LOCATION_STREET_AD, DEPARTMENT_LOCATION_POSTAL_CO, DEPARTMENT_LOCATION_CITY, DEPARTMENT_LOCATION_STATE_PRO
    , CONSTRAINT VJOB_HISTORY_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.JOB_HISTORY_ID LINK_ID$,
    B.EMAIL EMPLOYEE_EMAIL,
    A.START_DATE,
    A.END_DATE,
    C.JOB_TITLE JOB_JOB_TITLE,
    D.DEPARTMENT_NAME DEPARTMENT_DEPARTMENT_NAME,
    D_B.EMAIL DEPARTMENT_MANAGER,
    D_C.STREET_ADDRESS DEPARTMENT_LOCATION_STREET_AD,
    D_C.POSTAL_CODE DEPARTMENT_LOCATION_POSTAL_CO,
    D_C.CITY DEPARTMENT_LOCATION_CITY,
    D_C.STATE_PROVINCE DEPARTMENT_LOCATION_STATE_PRO
FROM JOB_HISTORY A
JOIN EMPLOYEES B ON B.EMPLOYEE_ID = A.EMPLOYEE_ID
JOIN JOBS C ON C.JOB_ID = A.JOB_ID
LEFT OUTER JOIN DEPARTMENTS D ON D.DEPARTMENT_ID = A.DEPARTMENT_ID
LEFT OUTER JOIN EMPLOYEES D_B ON D_B.EMPLOYEE_ID = D.MANAGER_ID
LEFT OUTER JOIN LOCATIONS D_C ON D_C.LOCATION_ID = D.LOCATION_ID;

CREATE OR REPLACE TRIGGER VJOB_HISTORY_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VJOB_HISTORY_IMP FOR EACH ROW  
DECLARE 
    v_row JOB_HISTORY%ROWTYPE;
    v_DEPARTMENT_LOCATION_ID LOCATIONS.LOCATION_ID%TYPE;
    v_DEPARTMENT_MANAGER_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
    if DELETING then 
        DELETE FROM JOB_HISTORY A 
        WHERE A.JOB_HISTORY_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.START_DATE                       := :new.START_DATE;
    v_row.END_DATE                         := :new.END_DATE;
    v_row.JOB_HISTORY_ID                   := :new.LINK_ID$;
    if :new.EMPLOYEE_EMAIL IS NOT NULL then 
        SELECT B.EMPLOYEE_ID INTO v_row.EMPLOYEE_ID
        FROM EMPLOYEES B 
        WHERE B.EMAIL = :new.EMPLOYEE_EMAIL;
    end if;
    if :new.JOB_JOB_TITLE IS NOT NULL then 
        SELECT C.JOB_ID INTO v_row.JOB_ID
        FROM JOBS C 
        WHERE C.JOB_TITLE = :new.JOB_JOB_TITLE;
    end if;
    if :new.DEPARTMENT_MANAGER IS NOT NULL then 
        SELECT D_B.EMPLOYEE_ID INTO v_DEPARTMENT_MANAGER_ID
        FROM EMPLOYEES D_B 
        WHERE D_B.EMAIL = :new.DEPARTMENT_MANAGER;
    end if;
    if :new.DEPARTMENT_LOCATION_CITY IS NOT NULL OR :new.DEPARTMENT_LOCATION_POSTAL_CO IS NOT NULL OR :new.DEPARTMENT_LOCATION_STATE_PRO IS NOT NULL OR :new.DEPARTMENT_LOCATION_STREET_AD IS NOT NULL then 
      begin
        SELECT D_C.LOCATION_ID INTO v_DEPARTMENT_LOCATION_ID
        FROM LOCATIONS D_C 
        WHERE (D_C.CITY = :new.DEPARTMENT_LOCATION_CITY OR :new.DEPARTMENT_LOCATION_CITY IS NULL)
        AND (D_C.POSTAL_CODE = :new.DEPARTMENT_LOCATION_POSTAL_CO OR D_C.POSTAL_CODE IS NULL AND :new.DEPARTMENT_LOCATION_POSTAL_CO IS NULL)
        AND (D_C.STATE_PROVINCE = :new.DEPARTMENT_LOCATION_STATE_PRO OR D_C.STATE_PROVINCE IS NULL AND :new.DEPARTMENT_LOCATION_STATE_PRO IS NULL)
        AND (D_C.STREET_ADDRESS = :new.DEPARTMENT_LOCATION_STREET_AD OR :new.DEPARTMENT_LOCATION_STREET_AD IS NULL);
      exception when NO_DATA_FOUND then
        INSERT INTO LOCATIONS(CITY, POSTAL_CODE, STATE_PROVINCE, STREET_ADDRESS) VALUES (:new.DEPARTMENT_LOCATION_CITY, :new.DEPARTMENT_LOCATION_POSTAL_CO, :new.DEPARTMENT_LOCATION_STATE_PRO, :new.DEPARTMENT_LOCATION_STREET_AD) RETURNING (LOCATION_ID) INTO v_DEPARTMENT_LOCATION_ID;
      end;
    end if;
    if :new.DEPARTMENT_DEPARTMENT_NAME IS NOT NULL OR v_DEPARTMENT_MANAGER_ID IS NOT NULL OR v_DEPARTMENT_LOCATION_ID IS NOT NULL then 
      begin
        SELECT D.DEPARTMENT_ID INTO v_row.DEPARTMENT_ID
        FROM DEPARTMENTS D 
        WHERE (D.DEPARTMENT_NAME = :new.DEPARTMENT_DEPARTMENT_NAME OR :new.DEPARTMENT_DEPARTMENT_NAME IS NULL)
        AND (D.MANAGER_ID = v_DEPARTMENT_MANAGER_ID OR D.MANAGER_ID IS NULL AND v_DEPARTMENT_MANAGER_ID IS NULL)
        AND (D.LOCATION_ID = v_DEPARTMENT_LOCATION_ID OR D.LOCATION_ID IS NULL AND v_DEPARTMENT_LOCATION_ID IS NULL);
      exception when NO_DATA_FOUND then
        INSERT INTO DEPARTMENTS(DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES (:new.DEPARTMENT_DEPARTMENT_NAME, v_DEPARTMENT_MANAGER_ID, v_DEPARTMENT_LOCATION_ID) RETURNING (DEPARTMENT_ID) INTO v_row.DEPARTMENT_ID;
      end;
    end if;

    if INSERTING OR v_row.JOB_HISTORY_ID IS NULL then 
        INSERT INTO JOB_HISTORY VALUES v_row;
    else 
        UPDATE JOB_HISTORY SET ROW = v_row
        WHERE JOB_HISTORY_ID = v_row.JOB_HISTORY_ID;
    end if;
END VJOB_HISTORY_IMP_TR;

/

CREATE OR REPLACE VIEW VLOCATIONS_IMP
    ( LINK_ID$, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_COUNTRY_ID, COUNTRY_COUNTRY_NAME, COUNTRY_REGION
    , CONSTRAINT VLOCATIONS_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.LOCATION_ID LINK_ID$,
    A.STREET_ADDRESS,
    A.POSTAL_CODE,
    A.CITY,
    A.STATE_PROVINCE,
    B.COUNTRY_ID COUNTRY_COUNTRY_ID,
    B.COUNTRY_NAME COUNTRY_COUNTRY_NAME,
    B_B.REGION_NAME COUNTRY_REGION
FROM LOCATIONS A
LEFT OUTER JOIN COUNTRIES B ON B.COUNTRY_ID = A.COUNTRY_ID
LEFT OUTER JOIN REGIONS B_B ON B_B.REGION_ID = B.REGION_ID;

CREATE OR REPLACE TRIGGER VLOCATIONS_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VLOCATIONS_IMP FOR EACH ROW  
DECLARE 
    v_row LOCATIONS%ROWTYPE;
    v_COUNTRY_REGION_ID REGIONS.REGION_ID%TYPE;
BEGIN
    if DELETING then 
        DELETE FROM LOCATIONS A 
        WHERE A.LOCATION_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.LOCATION_ID                      := :new.LINK_ID$;
    v_row.STREET_ADDRESS                   := :new.STREET_ADDRESS;
    v_row.POSTAL_CODE                      := :new.POSTAL_CODE;
    v_row.CITY                             := :new.CITY;
    v_row.STATE_PROVINCE                   := :new.STATE_PROVINCE;
    if :new.COUNTRY_REGION IS NOT NULL then 
      begin
        SELECT B_B.REGION_ID INTO v_COUNTRY_REGION_ID
        FROM REGIONS B_B 
        WHERE B_B.REGION_NAME = :new.COUNTRY_REGION;
      exception when NO_DATA_FOUND then
        INSERT INTO REGIONS(REGION_NAME) VALUES (:new.COUNTRY_REGION) RETURNING (REGION_ID) INTO v_COUNTRY_REGION_ID;
      end;
    end if;

    if INSERTING OR v_row.LOCATION_ID IS NULL then 
        INSERT INTO LOCATIONS VALUES v_row;
    else 
        UPDATE LOCATIONS SET ROW = v_row
        WHERE LOCATION_ID = v_row.LOCATION_ID;
    end if;
END VLOCATIONS_IMP_TR;

/

CREATE OR REPLACE VIEW VREGIONS_IMP
    ( LINK_ID$, REGION_NAME
    , CONSTRAINT VREGIONS_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.REGION_ID LINK_ID$,
    A.REGION_NAME
FROM REGIONS A;

CREATE OR REPLACE TRIGGER VREGIONS_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VREGIONS_IMP FOR EACH ROW  
DECLARE 
    v_row REGIONS%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM REGIONS A 
        WHERE A.REGION_ID = :new.LINK_ID$;
        return;
    end if;
    v_row.REGION_ID                        := :new.LINK_ID$;
    v_row.REGION_NAME                      := :new.REGION_NAME;

    if INSERTING OR v_row.REGION_ID IS NULL then 
        INSERT INTO REGIONS VALUES v_row;
    else 
        UPDATE REGIONS SET ROW = v_row
        WHERE REGION_ID = v_row.REGION_ID;
    end if;
END VREGIONS_IMP_TR;

/

CREATE OR REPLACE VIEW VSPRINGY_DIAGRAMS_IMP
    ( LINK_ID$, DESCRIPTION, PROTECTED, FONTSIZE, ZOOM_FACTOR, X_OFFSET, Y_OFFSET, CANVAS_WIDTH, EXCLUDE_SINGLES, EDGE_LABELS, STIFFNESS, REPULSION, DAMPING, MINENERGYTHRESHOLD, MAXSPEED, EXCITE_METHOD, PINWEIGHT
    , CONSTRAINT VSPRINGY_DIAGRAMS_IMP_PK PRIMARY KEY (LINK_ID$) RELY DISABLE ) 
 AS 
SELECT   
    A.ID LINK_ID$,
    A.DESCRIPTION,
    A.PROTECTED,
    A.FONTSIZE,
    A.ZOOM_FACTOR,
    A.X_OFFSET,
    A.Y_OFFSET,
    A.CANVAS_WIDTH,
    A.EXCLUDE_SINGLES,
    A.EDGE_LABELS,
    A.STIFFNESS,
    A.REPULSION,
    A.DAMPING,
    A.MINENERGYTHRESHOLD,
    A.MAXSPEED,
    A.EXCITE_METHOD,
    A.PINWEIGHT
FROM SPRINGY_DIAGRAMS A;

CREATE OR REPLACE TRIGGER VSPRINGY_DIAGRAMS_IMP_TR INSTEAD OF INSERT OR UPDATE OR DELETE ON VSPRINGY_DIAGRAMS_IMP FOR EACH ROW  
DECLARE 
    v_row SPRINGY_DIAGRAMS%ROWTYPE;
BEGIN
    if DELETING then 
        DELETE FROM SPRINGY_DIAGRAMS A 
        WHERE A.ID = :new.LINK_ID$;
        return;
    end if;
    v_row.ID                               := :new.LINK_ID$;
    v_row.DESCRIPTION                      := :new.DESCRIPTION;
    v_row.PROTECTED                        := :new.PROTECTED;
    v_row.FONTSIZE                         := :new.FONTSIZE;
    v_row.ZOOM_FACTOR                      := :new.ZOOM_FACTOR;
    v_row.X_OFFSET                         := :new.X_OFFSET;
    v_row.Y_OFFSET                         := :new.Y_OFFSET;
    v_row.CANVAS_WIDTH                     := :new.CANVAS_WIDTH;
    v_row.EXCLUDE_SINGLES                  := :new.EXCLUDE_SINGLES;
    v_row.EDGE_LABELS                      := :new.EDGE_LABELS;
    v_row.STIFFNESS                        := :new.STIFFNESS;
    v_row.REPULSION                        := :new.REPULSION;
    v_row.DAMPING                          := :new.DAMPING;
    v_row.MINENERGYTHRESHOLD               := :new.MINENERGYTHRESHOLD;
    v_row.MAXSPEED                         := :new.MAXSPEED;
    v_row.EXCITE_METHOD                    := :new.EXCITE_METHOD;
    v_row.PINWEIGHT                        := :new.PINWEIGHT;

    if INSERTING OR v_row.ID IS NULL then 
        v_row.PROTECTED                        := NVL(v_row.PROTECTED, 'N');
        v_row.FONTSIZE                         := NVL(v_row.FONTSIZE, 4);
        v_row.ZOOM_FACTOR                      := NVL(v_row.ZOOM_FACTOR, 1);
        v_row.X_OFFSET                         := NVL(v_row.X_OFFSET, 0);
        v_row.Y_OFFSET                         := NVL(v_row.Y_OFFSET, 0);
        v_row.EXCLUDE_SINGLES                  := NVL(v_row.EXCLUDE_SINGLES, 'NO');
        v_row.EDGE_LABELS                      := NVL(v_row.EDGE_LABELS, 'NO');
        v_row.STIFFNESS                        := NVL(v_row.STIFFNESS, 400);
        v_row.REPULSION                        := NVL(v_row.REPULSION, 2000
	);
        v_row.DAMPING                          := NVL(v_row.DAMPING, 0.15);
        v_row.MINENERGYTHRESHOLD               := NVL(v_row.MINENERGYTHRESHOLD, 0.01);
        v_row.MAXSPEED                         := NVL(v_row.MAXSPEED, 50);
        v_row.EXCITE_METHOD                    := NVL(v_row.EXCITE_METHOD, 'none');
        v_row.PINWEIGHT                        := NVL(v_row.PINWEIGHT, 10);
        INSERT INTO SPRINGY_DIAGRAMS VALUES v_row;
    else 
        UPDATE SPRINGY_DIAGRAMS SET ROW = v_row
        WHERE ID = v_row.ID;
    end if;
END VSPRINGY_DIAGRAMS_IMP_TR;

/

